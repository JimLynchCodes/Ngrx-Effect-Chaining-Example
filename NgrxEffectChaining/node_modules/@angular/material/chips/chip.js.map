{"version":3,"file":"chip.js","sourceRoot":"","sources":["../../../../src/lib/chips/chip.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  Renderer\n} from '@angular/core';\n\nimport {Focusable} from '../core/a11y/focus-key-manager';\nimport {coerceBooleanProperty} from '../core/coercion/boolean-property';\n\nexport interface MdChipEvent {\n  chip: MdChip;\n}\n\n/**\n * Material design styled Chip component. Used inside the MdChipList component.\n */\n@Component({\n  selector: `md-basic-chip, [md-basic-chip], md-chip, [md-chip],\n             mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  template: `<ng-content></ng-content>`,\n  host: {\n    '[class.mat-chip]': 'true',\n    'tabindex': '-1',\n    'role': 'option',\n\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled',\n    '[attr.aria-disabled]': '_isAriaDisabled',\n\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MdChip implements Focusable, OnInit, OnDestroy {\n\n  /** Whether or not the chip is disabled. Disabled chips cannot be focused. */\n  protected _disabled: boolean = null;\n\n  /** Whether or not the chip is selected. */\n  protected _selected: boolean = false;\n\n  /** The palette color of selected chips. */\n  protected _color: string = 'primary';\n\n  /** Emitted when the chip is focused. */\n  onFocus = new EventEmitter<MdChipEvent>();\n\n  /** Emitted when the chip is selected. */\n  @Output() select = new EventEmitter<MdChipEvent>();\n\n  /** Emitted when the chip is deselected. */\n  @Output() deselect = new EventEmitter<MdChipEvent>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() destroy = new EventEmitter<MdChipEvent>();\n\n  constructor(protected _renderer: Renderer, protected _elementRef: ElementRef) { }\n\n  ngOnInit(): void {\n    this._addDefaultCSSClass();\n    this._updateColor(this._color);\n  }\n\n  ngOnDestroy(): void {\n    this.destroy.emit({chip: this});\n  }\n\n  /** Whether or not the chip is disabled. */\n  @Input() get disabled(): boolean {\n    return this._disabled;\n  }\n\n  /** Sets the disabled state of the chip. */\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value) ? true : null;\n  }\n\n  /** A String representation of the current disabled state. */\n  get _isAriaDisabled(): string {\n    return String(coerceBooleanProperty(this.disabled));\n  }\n\n  /** Whether or not this chip is selected. */\n  @Input() get selected(): boolean {\n    return this._selected;\n  }\n\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n\n    if (this._selected) {\n      this.select.emit({chip: this});\n    } else {\n      this.deselect.emit({chip: this});\n    }\n  }\n\n  /**\n   * Toggles the current selected state of this chip.\n   * @return Whether the chip is selected.\n   */\n  toggleSelected(): boolean {\n    this.selected = !this.selected;\n    return this.selected;\n  }\n\n  /** The color of the chip. Can be `primary`, `accent`, or `warn`. */\n  @Input() get color(): string {\n    return this._color;\n  }\n\n  set color(value: string) {\n    this._updateColor(value);\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    this._renderer.invokeElementMethod(this._elementRef.nativeElement, 'focus');\n    this.onFocus.emit({chip: this});\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    } else {\n      this.focus();\n    }\n  }\n\n  /** Initializes the appropriate CSS classes based on the chip type (basic or standard). */\n  private _addDefaultCSSClass() {\n    let el: HTMLElement = this._elementRef.nativeElement;\n\n    // Always add the `mat-chip` class\n    el.classList.add('mat-chip');\n\n    // If we are a basic chip, also add the `mat-basic-chip` class for :not() targeting\n    if (el.nodeName.toLowerCase() == 'mat-basic-chip' || el.hasAttribute('mat-basic-chip') ||\n        el.nodeName.toLowerCase() == 'md-basic-chip' || el.hasAttribute('md-basic-chip')) {\n      el.classList.add('mat-basic-chip');\n    }\n  }\n\n  /** Updates the private _color variable and the native element. */\n  private _updateColor(newColor: string) {\n    this._setElementColor(this._color, false);\n    this._setElementColor(newColor, true);\n    this._color = newColor;\n  }\n\n  /** Sets the mat-color on the native element. */\n  private _setElementColor(color: string, isAdd: boolean) {\n    if (color != null && color != '') {\n      this._renderer.setElementClass(this._elementRef.nativeElement, `mat-${color}`, isAdd);\n    }\n  }\n}\n"]}