{"version":3,"file":"slide-toggle.js","sourceRoot":"","sources":["../../../../src/lib/slide-toggle/slide-toggle.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EACL,SAAS,EACT,UAAU,EACV,QAAQ,EACR,UAAU,EACV,uBAAuB,EACvB,KAAK,EACL,MAAM,EACN,YAAY,EAEZ,QAAQ,EAER,SAAS,EACT,iBAAiB,EAClB,MAAM,eAAe;OACf,EAAC,qBAAqB,EAAC,MAAM,2BAA2B;OACxD,EAAC,WAAW,EAAwB,iBAAiB,EAAC,MAAM,gBAAgB;OAC5E,EACL,iBAAiB,EACjB,qBAAqB,EACrB,aAAa,EAEb,mBAAmB,EACpB,MAAM,SAAS;OACT,EAAC,UAAU,EAAC,MAAM,iBAAiB;AAG1C,OAAO,IAAM,8BAA8B,GAAQ;IACjD,OAAO,EAAE,iBAAiB;IAC1B,WAAW,EAAE,UAAU,CAAC,cAAM,OAAA,aAAa,EAAb,CAAa,CAAC;IAC5C,KAAK,EAAE,IAAI;CACZ,CAAC;AAEF,gEAAgE;AAChE;IAAA;IAGA,CAAC;IAAD,0BAAC;AAAD,CAAC,AAHD,IAGC;AAED,4EAA4E;AAC5E,IAAI,MAAM,GAAG,CAAC,CAAC;AAEf;;GAEG;AAmBH;IAsDE,uBAAoB,WAAuB,EAAU,SAAmB;QAApD,gBAAW,GAAX,WAAW,CAAY;QAAU,cAAS,GAAT,SAAS,CAAU;QApDhE,aAAQ,GAAG,UAAC,CAAM,IAAM,CAAC,CAAC;QAC1B,cAAS,GAAG,cAAO,CAAC,CAAC;QAE7B,yEAAyE;QACjE,cAAS,GAAG,qBAAmB,EAAE,MAAQ,CAAC;QAC1C,aAAQ,GAAY,KAAK,CAAC;QAE1B,iBAAY,GAAY,KAAK,CAAC;QAC9B,mBAAc,GAAwB,IAAI,CAAC;QAC3C,cAAS,GAAY,KAAK,CAAC;QAC3B,cAAS,GAAY,KAAK,CAAC;QAEnC,mEAAmE;QACnE,cAAS,GAAY,KAAK,CAAC;QAE3B,iEAAiE;QACxD,SAAI,GAAW,IAAI,CAAC;QAE7B,8FAA8F;QACrF,OAAE,GAAW,IAAI,CAAC,SAAS,CAAC;QAErC,2EAA2E;QAClE,aAAQ,GAAW,CAAC,CAAC;QAE9B,4FAA4F;QACnF,kBAAa,GAAuB,OAAO,CAAC;QAErD,4EAA4E;QACvD,cAAS,GAAW,IAAI,CAAC;QAE9C,iFAAiF;QACvD,mBAAc,GAAW,IAAI,CAAC;QAYhD,YAAO,GAAsC,IAAI,YAAY,EAAuB,CAAC;QAC7F,gFAAgF;QACtE,WAAM,GAAoC,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;IAOL,CAAC;IAjB5E,sBAAI,mCAAQ;QAFZ,4CAA4C;aAE5C,cAA0B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;aAClD,UAAa,KAAK,IAAI,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;;OADpB;IAKlD,sBAAI,mCAAQ;QAFZ,4CAA4C;aAE5C,cAA0B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;aAClD,UAAa,KAAK,IAAI,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;;OADpB;IAQlD,sBAAI,kCAAO;QADX,yDAAyD;aACzD,cAAwB,MAAM,CAAC,CAAG,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,SAAS,YAAQ,CAAC,CAAC,CAAC;;;OAAA;IAMtE,0CAAkB,GAAlB;QACE,IAAI,CAAC,cAAc,GAAG,IAAI,mBAAmB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAClE,CAAC;IAED;;;;OAIG;IACH,sCAAc,GAAd,UAAe,KAAY;QACzB,0DAA0D;QAC1D,yEAAyE;QACzE,4DAA4D;QAC5D,KAAK,CAAC,eAAe,EAAE,CAAC;QAExB,8FAA8F;QAC9F,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;YACxD,IAAI,CAAC,MAAM,EAAE,CAAC;YAEd,gEAAgE;YAChE,8EAA8E;YAC9E,4FAA4F;YAC5F,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC1B,CAAC;IACH,CAAC;IAED,qCAAa,GAAb,UAAc,KAAY;QACxB,IAAI,CAAC,SAAS,EAAE,CAAC;QAEjB,mFAAmF;QACnF,qFAAqF;QACrF,wFAAwF;QACxF,gFAAgF;QAChF,8FAA8F;QAC9F,2CAA2C;QAC3C,kEAAkE;QAClE,KAAK,CAAC,eAAe,EAAE,CAAC;IAC1B,CAAC;IAED,qCAAa,GAAb;QAAA,iBAOC;QANC,qFAAqF;QACrF,gFAAgF;QAChF,mDAAmD;QACnD,iDAAiD;QACjD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,YAAY,GAAG,KAAK,EAAzB,CAAyB,EAAE,GAAG,CAAC,CAAC;IACnD,CAAC;IAED,qCAAa,GAAb;QACE,qFAAqF;QACrF,gCAAgC;QAChC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACxB,CAAC;IACH,CAAC;IAED,oCAAY,GAAZ;QACE,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IAED,mDAAmD;IACnD,kCAAU,GAAV,UAAW,KAAU;QACnB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;IACvB,CAAC;IAED,mDAAmD;IACnD,wCAAgB,GAAhB,UAAiB,EAAO;QACtB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACrB,CAAC;IAED,mDAAmD;IACnD,yCAAiB,GAAjB,UAAkB,EAAO;QACvB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACtB,CAAC;IAED,qDAAqD;IACrD,wCAAgB,GAAhB,UAAiB,UAAmB;QAClC,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC;IAC7B,CAAC;IAED,gCAAgC;IAChC,6BAAK,GAAL;QACE,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;QAC9E,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAID,sBAAI,kCAAO;QAFX,2CAA2C;aAE3C,cAAgB,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;aACzC,UAAY,KAAK;YACf,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC7B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;gBACtB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC/B,CAAC;QACH,CAAC;;;OANwC;IAUzC,sBAAI,gCAAK;QAFT,sEAAsE;aAEtE,cAAsB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;aAC3C,UAAU,KAAa;YACrB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QAC3B,CAAC;;;OAH0C;IAK3C,qDAAqD;IACrD,8BAAM,GAAN;QACE,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;IAC/B,CAAC;IAEO,oCAAY,GAApB,UAAqB,QAAgB;QACnC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAC1C,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QACtC,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;IACzB,CAAC;IAEO,wCAAgB,GAAxB,UAAyB,KAAa,EAAE,KAAc;QACpD,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,EAAE,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,SAAO,KAAO,EAAE,KAAK,CAAC,CAAC;QACxF,CAAC;IACH,CAAC;IAED,iEAAiE;IACzD,wCAAgB,GAAxB;QACE,IAAI,KAAK,GAAG,IAAI,mBAAmB,EAAE,CAAC;QACtC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC;QACpB,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;IAGD,oCAAY,GAAZ;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACnD,CAAC;IACH,CAAC;IAED,+BAAO,GAAP,UAAQ,KAAkB;QACxB,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QACxD,CAAC;IACH,CAAC;IAED,kCAAU,GAAV;QAAA,iBAWC;QAVC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC;QACT,CAAC;QAED,oEAAoE;QACpE,2FAA2F;QAC3F,UAAU,CAAC;YACT,KAAI,CAAC,OAAO,GAAG,KAAI,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC;YACnD,KAAI,CAAC,gBAAgB,EAAE,CAAC;QAC1B,CAAC,EAAE,CAAC,CAAC,CAAC;IACR,CAAC;IA/LD;QAAC,KAAK,EAAE;;+CAAA;IAGR;QAAC,KAAK,EAAE;;6CAAA;IAGR;QAAC,KAAK,EAAE;;mDAAA;IAGR;QAAC,KAAK,EAAE;;wDAAA;IAGR;QAAC,KAAK,CAAC,YAAY,CAAC;;oDAAA;IAGpB;QAAC,KAAK,CAAC,iBAAiB,CAAC;;yDAAA;IAGzB;QAAC,KAAK,EAAE;;iDAAA;IAKR;QAAC,KAAK,EAAE;;iDAAA;IAMR;QAAC,MAAM,EAAE;;iDAAA;IAKT;QAAC,SAAS,CAAC,OAAO,CAAC;;wDAAA;IA4FnB;QAAC,KAAK,EAAE;;gDAAA;IAUR;QAAC,KAAK,EAAE;;8CAAA;IA5KV;QAAC,SAAS,CAAC;YACT,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,mCAAmC;YAC7C,IAAI,EAAE;gBACJ,0BAA0B,EAAE,MAAM;gBAClC,qBAAqB,EAAE,SAAS;gBAChC,sBAAsB,EAAE,UAAU;gBAClC,kFAAkF;gBAClF,kCAAkC,EAAE,WAAW;gBAC/C,uCAAuC,EAAE,2BAA2B;gBACpE,aAAa,EAAE,iBAAiB;aACjC;YACD,WAAW,EAAE,mBAAmB;YAChC,SAAS,EAAE,CAAC,kBAAkB,CAAC;YAC/B,SAAS,EAAE,CAAC,8BAA8B,CAAC;YAC3C,aAAa,EAAE,iBAAiB,CAAC,IAAI;YACrC,eAAe,EAAE,uBAAuB,CAAC,MAAM;SAChD,CAAC;;qBAAA;IAoNF,oBAAC;AAAD,CAAC,AAnND,IAmNC;AAED;;GAEG;AACH;IAQE,6BAAoB,WAAuB;QAAvB,gBAAW,GAAX,WAAW,CAAY;QACzC,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,aAAa,CAAC,aAAa,CAAC,mCAAmC,CAAC,CAAC;QAC7F,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC,aAAa,CAAC,aAAa,CAAC,uBAAuB,CAAC,CAAC;IACtF,CAAC;IAED,sDAAsD;IACtD,wCAAU,GAAV;QACE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC;IAC/B,CAAC;IAGD,gDAAgD;IAChD,4CAAc,GAAd,UAAe,OAAgB;QAC7B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC;YAC/E,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;YACxB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QAC9C,CAAC;IACH,CAAC;IAED,gEAAgE;IAChE,2CAAa,GAAb;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAC3B,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;YAE/C,iBAAiB,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YAErC,MAAM,CAAC,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QAC/B,CAAC;IACH,CAAC;IAED,yEAAyE;IACzE,iDAAmB,GAAnB,UAAoB,QAAgB;QAClC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;QACtD,iBAAiB,CAAC,IAAI,CAAC,QAAQ,EAAE,iBAAe,IAAI,CAAC,WAAW,aAAU,CAAC,CAAC;IAC9E,CAAC;IAED,iEAAiE;IACzD,iDAAmB,GAA3B,UAA4B,QAAgB;QAC1C,IAAI,UAAU,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,GAAG,CAAC;QAExD,oFAAoF;QACpF,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAClB,UAAU,IAAI,GAAG,CAAC;QACpB,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,CAAC;IAChD,CAAC;IAEH,0BAAC;AAAD,CAAC,AA1DD,IA0DC;AASD;IAAA;IAQA,CAAC;IAPC,kBAAkB;IACX,2BAAO,GAAd;QACE,MAAM,CAAC;YACL,QAAQ,EAAE,mBAAmB;YAC7B,SAAS,EAAE,EAAE;SACd,CAAC;IACJ,CAAC;IAbH;QAAC,QAAQ,CAAC;YACR,OAAO,EAAE,CAAC,WAAW,EAAE,mBAAmB,CAAC;YAC3C,OAAO,EAAE,CAAC,aAAa,EAAE,mBAAmB,CAAC;YAC7C,YAAY,EAAE,CAAC,aAAa,CAAC;YAC7B,SAAS,EAAE,CAAC,EAAC,OAAO,EAAE,qBAAqB,EAAE,QAAQ,EAAE,aAAa,EAAC,CAAC;SACvE,CAAC;;2BAAA;IASF,0BAAC;AAAD,CAAC,AARD,IAQC","sourcesContent":["import {\n  Component,\n  ElementRef,\n  Renderer,\n  forwardRef,\n  ChangeDetectionStrategy,\n  Input,\n  Output,\n  EventEmitter,\n  AfterContentInit,\n  NgModule,\n  ModuleWithProviders,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {FormsModule, ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  applyCssTransform,\n  coerceBooleanProperty,\n  GestureConfig,\n  HammerInput,\n  CompatibilityModule,\n} from '../core';\nimport {Observable} from 'rxjs/Observable';\n\n\nexport const MD_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdSlideToggle),\n  multi: true\n};\n\n// A simple change event emitted by the MdSlideToggle component.\nexport class MdSlideToggleChange {\n  source: MdSlideToggle;\n  checked: boolean;\n}\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextId = 0;\n\n/**\n * Two-state control, which can be also called `switch`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'md-slide-toggle, mat-slide-toggle',\n  host: {\n    '[class.mat-slide-toggle]': 'true',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    // This mat-slide-toggle prefix will change, once the temporary ripple is removed.\n    '[class.mat-slide-toggle-focused]': '_hasFocus',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '(mousedown)': '_setMousedown()'\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MD_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MdSlideToggle implements AfterContentInit, ControlValueAccessor {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  // A unique id for the slide-toggle. By default the id is auto-generated.\n  private _uniqueId = `md-slide-toggle-${++nextId}`;\n  private _checked: boolean = false;\n  private _color: string;\n  private _isMousedown: boolean = false;\n  private _slideRenderer: SlideToggleRenderer = null;\n  private _disabled: boolean = false;\n  private _required: boolean = false;\n\n  // Needs to be public to support AOT compilation (as host binding).\n  _hasFocus: boolean = false;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Used to specify the tabIndex value for the underlying input element. */\n  @Input() tabIndex: number = 0;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string = null;\n\n  /** Whether the slide-toggle is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  private _change: EventEmitter<MdSlideToggleChange> = new EventEmitter<MdSlideToggleChange>();\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() change: Observable<MdSlideToggleChange> = this._change.asObservable();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer) {}\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef);\n  }\n\n  /**\n   * The onChangeEvent method will be also called on click.\n   * This is because everything for the slide-toggle is wrapped inside of a label,\n   * which triggers a onChange event on click.\n   */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Once a drag is currently in progress, we do not want to toggle the slide-toggle on a click.\n    if (!this.disabled && !this._slideRenderer.isDragging()) {\n      this.toggle();\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    }\n  }\n\n  _onInputClick(event: Event) {\n    this.onTouched();\n\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  _setMousedown() {\n    // We only *show* the focus style when focus has come to the button via the keyboard.\n    // The Material Design spec is silent on this topic, and without doing this, the\n    // button continues to look :active after clicking.\n    // @see http://marcysutton.com/button-focus-hell/\n    this._isMousedown = true;\n    setTimeout(() => this._isMousedown = false, 100);\n  }\n\n  _onInputFocus() {\n    // Only show the focus / ripple indicator when the focus was not triggered by a mouse\n    // interaction on the component.\n    if (!this._isMousedown) {\n      this._hasFocus = true;\n    }\n  }\n\n  _onInputBlur() {\n    this._hasFocus = false;\n    this.onTouched();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Focuses the slide-toggle. */\n  focus() {\n    this._renderer.invokeElementMethod(this._inputElement.nativeElement, 'focus');\n    this._onInputFocus();\n  }\n\n  /** Whether the slide-toggle is checked. */\n  @Input()\n  get checked() { return !!this._checked; }\n  set checked(value) {\n    if (this.checked !== !!value) {\n      this._checked = value;\n      this.onChange(this._checked);\n    }\n  }\n\n  /** The color of the slide-toggle. Can be primary, accent, or warn. */\n  @Input()\n  get color(): string { return this._color; }\n  set color(value: string) {\n    this._updateColor(value);\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle() {\n    this.checked = !this.checked;\n  }\n\n  private _updateColor(newColor: string) {\n    this._setElementColor(this._color, false);\n    this._setElementColor(newColor, true);\n    this._color = newColor;\n  }\n\n  private _setElementColor(color: string, isAdd: boolean) {\n    if (color != null && color != '') {\n      this._renderer.setElementClass(this._elementRef.nativeElement, `mat-${color}`, isAdd);\n    }\n  }\n\n  /** Emits the change event to the `change` output EventEmitter */\n  private _emitChangeEvent() {\n    let event = new MdSlideToggleChange();\n    event.source = this;\n    event.checked = this.checked;\n    this._change.emit(event);\n  }\n\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.isDragging()) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (!this._slideRenderer.isDragging()) {\n      return;\n    }\n\n    // Notice that we have to stop outside of the current event handler,\n    // because otherwise the click event will be fired and will reset the new checked variable.\n    setTimeout(() => {\n      this.checked = this._slideRenderer.stopThumbDrag();\n      this._emitChangeEvent();\n    }, 0);\n  }\n\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  private _thumbEl: HTMLElement;\n  private _thumbBarEl: HTMLElement;\n  private _thumbBarWidth: number;\n  private _checked: boolean;\n  private _percentage: number;\n\n  constructor(private _elementRef: ElementRef) {\n    this._thumbEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n    this._thumbBarEl = _elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n  }\n\n  /** Whether the slide-toggle is currently dragging. */\n  isDragging(): boolean {\n    return !!this._thumbBarWidth;\n  }\n\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean) {\n    if (!this.isDragging()) {\n      this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n      this._checked = checked;\n      this._thumbEl.classList.add('mat-dragging');\n    }\n  }\n\n  /** Stops the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (this.isDragging()) {\n      this._thumbBarWidth = null;\n      this._thumbEl.classList.remove('mat-dragging');\n\n      applyCssTransform(this._thumbEl, '');\n\n      return this._percentage > 50;\n    }\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number) {\n    this._percentage = this._getThumbPercentage(distance);\n    applyCssTransform(this._thumbEl, `translate3d(${this._percentage}%, 0, 0)`);\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. */\n  private _getThumbPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._checked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n\n\n@NgModule({\n  imports: [FormsModule, CompatibilityModule],\n  exports: [MdSlideToggle, CompatibilityModule],\n  declarations: [MdSlideToggle],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}],\n})\nexport class MdSlideToggleModule {\n  /** @deprecated */\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdSlideToggleModule,\n      providers: []\n    };\n  }\n}\n"]}