{"version":3,"file":"unique-selection-dispatcher.js","sourceRoot":"","sources":["../../../../../src/lib/core/coordination/unique-selection-dispatcher.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EAAC,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAC,MAAM,eAAe;AAM5D;;;;;;;;GAQG;AAEH;IAAA;QACU,eAAU,GAAwC,EAAE,CAAC;IAiB/D,CAAC;IAfC;;;;OAIG;IACH,0CAAM,GAAN,UAAO,EAAU,EAAE,IAAY;QAC7B,GAAG,CAAC,CAAiB,UAAe,EAAf,KAAA,IAAI,CAAC,UAAU,EAAf,cAAe,EAAf,IAAe,CAAC;YAAhC,IAAI,QAAQ,SAAA;YACf,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;SACpB;IACH,CAAC;IAED,mDAAmD;IACnD,0CAAM,GAAN,UAAO,QAA2C;QAChD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IAlBH;QAAC,UAAU,EAAE;;iCAAA;IAmBb,gCAAC;AAAD,CAAC,AAlBD,IAkBC;AAED,6DACI,gBAA2C;IAC7C,MAAM,CAAC,gBAAgB,IAAI,IAAI,yBAAyB,EAAE,CAAC;AAC7D,CAAC;AAED,OAAO,IAAM,oCAAoC,GAAG;IAClD,sFAAsF;IACtF,OAAO,EAAE,yBAAyB;IAClC,IAAI,EAAE,CAAC,CAAC,IAAI,QAAQ,EAAE,EAAE,IAAI,QAAQ,EAAE,EAAE,yBAAyB,CAAC,CAAC;IACnE,UAAU,EAAE,4CAA4C;CACzD,CAAC","sourcesContent":["import {Injectable, Optional, SkipSelf} from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\n@Injectable()\nexport class UniqueSelectionDispatcher {\n  private _listeners: UniqueSelectionDispatcherListener[] = [];\n\n  /**\n   * Notify other items that selection for the given name has been set.\n   * @param id ID of the item.\n   * @param name Name of the item.\n   */\n  notify(id: string, name: string) {\n    for (let listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n\n  /** Listen for future changes to item selection. */\n  listen(listener: UniqueSelectionDispatcherListener) {\n    this._listeners.push(listener);\n  }\n}\n\nexport function UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: UniqueSelectionDispatcher) {\n  return parentDispatcher || new UniqueSelectionDispatcher();\n}\n\nexport const UNIQUE_SELECTION_DISPATCHER_PROVIDER = {\n  // If there is already a dispatcher available, use that. Otherwise, provide a new one.\n  provide: UniqueSelectionDispatcher,\n  deps: [[new Optional(), new SkipSelf(), UniqueSelectionDispatcher]],\n  useFactory: UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY\n};\n"]}