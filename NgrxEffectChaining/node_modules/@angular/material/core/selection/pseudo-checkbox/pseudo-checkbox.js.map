{"version":3,"file":"pseudo-checkbox.js","sourceRoot":"","sources":["../../../../../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EACL,SAAS,EACT,iBAAiB,EACjB,KAAK,EACL,UAAU,EACV,QAAQ,EACT,MAAM,eAAe;AAItB;;;;;;;;;;GAUG;AAcH;IAsBE,0BAAoB,WAAuB,EAAU,SAAmB;QAApD,gBAAW,GAAX,WAAW,CAAY;QAAU,cAAS,GAAT,SAAS,CAAU;QArBxE,qCAAqC;QAC5B,UAAK,GAA0B,WAAW,CAAC;QAEpD,wCAAwC;QAC/B,aAAQ,GAAY,KAAK,CAAC;QAkBjC,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;IACxB,CAAC;IAfD,sBAAI,mCAAK;QAFT,6BAA6B;aAE7B,cAAsB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;aAC3C,UAAU,KAAa;YACrB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACV,IAAI,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;gBAEnD,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,aAAa,EAAE,SAAO,IAAI,CAAC,KAAO,EAAE,KAAK,CAAC,CAAC;gBAC1E,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,aAAa,EAAE,SAAO,KAAO,EAAE,IAAI,CAAC,CAAC;gBACpE,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACtB,CAAC;QACH,CAAC;;;OAT0C;;IAP3C;QAAC,KAAK,EAAE;;mDAAA;IAGR;QAAC,KAAK,EAAE;;sDAAA;IAGR;QAAC,KAAK,EAAE;;iDAAA;IArBV;QAAC,SAAS,CAAC;YACT,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,aAAa,EAAE,iBAAiB,CAAC,IAAI;YACrC,QAAQ,EAAE,yCAAyC;YACnD,SAAS,EAAE,CAAC,qBAAqB,CAAC;YAClC,QAAQ,EAAE,EAAE;YACZ,IAAI,EAAE;gBACJ,6BAA6B,EAAE,MAAM;gBACrC,2CAA2C,EAAE,2BAA2B;gBACxE,qCAAqC,EAAE,qBAAqB;gBAC5D,sCAAsC,EAAE,UAAU;aACnD;SACF,CAAC;;wBAAA;IA0BF,uBAAC;AAAD,CAAC,AAzBD,IAyBC","sourcesContent":["import {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ElementRef,\n  Renderer,\n} from '@angular/core';\n\nexport type MdPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <md-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  selector: 'md-pseudo-checkbox, mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    '[class.mat-pseudo-checkbox]': 'true',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MdPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MdPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  /** Color of the checkbox. */\n  @Input()\n  get color(): string { return this._color; };\n  set color(value: string) {\n    if (value) {\n      let nativeElement = this._elementRef.nativeElement;\n\n      this._renderer.setElementClass(nativeElement, `mat-${this.color}`, false);\n      this._renderer.setElementClass(nativeElement, `mat-${value}`, true);\n      this._color = value;\n    }\n  }\n\n  private _color: string;\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer) {\n    this.color = 'accent';\n  }\n}\n"]}