{"version":3,"file":"dir.js","sourceRoot":"","sources":["../../../../../src/lib/core/rtl/dir.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EACL,QAAQ,EAER,SAAS,EACT,WAAW,EACX,MAAM,EACN,KAAK,EACL,YAAY,EACb,MAAM,eAAe;AAItB;;;;;GAKG;AAMH;IAAA;QACE,uCAAuC;QACzB,SAAI,GAAoB,KAAK,CAAC;QAE5C,gDAAgD;QACtC,cAAS,GAAG,IAAI,YAAY,EAAQ,CAAC;IAkBjD,CAAC;IAdC,sBAAI,oBAAG;QAFP,oBAAoB;aAEpB;YACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QACnB,CAAC;aACD,UAAQ,CAAkB;YACxB,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;YACpB,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;YACd,EAAE,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBACrB,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;YACxB,CAAC;QACH,CAAC;;;OAPA;IAUD,sBAAI,sBAAK;QADT,+CAA+C;aAC/C,cAA+B,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;aACjD,UAAU,CAAkB,IAAI,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;;;OADE;IAnBjD;QAAC,KAAK,CAAC,KAAK,CAAC;;qCAAA;IAGb;QAAC,MAAM,EAAE;;0CAAA;IAGT;QAAC,WAAW,CAAC,UAAU,CAAC;;kCAAA;IAb1B;QAAC,SAAS,CAAC;YACT,QAAQ,EAAE,OAAO;YACjB,iGAAiG;YACjG,QAAQ,EAAE,WAAW;SACtB,CAAC;;WAAA;IAwBF,UAAC;AAAD,CAAC,AAvBD,IAuBC;AAOD;IAAA;IAQA,CAAC;IAPC,kBAAkB;IACX,iBAAO,GAAd;QACE,MAAM,CAAC;YACL,QAAQ,EAAE,SAAS;YACnB,SAAS,EAAE,EAAE;SACd,CAAC;IACJ,CAAC;IAXH;QAAC,QAAQ,CAAC;YACR,OAAO,EAAE,CAAC,GAAG,CAAC;YACd,YAAY,EAAE,CAAC,GAAG,CAAC;SACpB,CAAC;;iBAAA;IASF,gBAAC;AAAD,CAAC,AARD,IAQC","sourcesContent":["import {\n  NgModule,\n  ModuleWithProviders,\n  Directive,\n  HostBinding,\n  Output,\n  Input,\n  EventEmitter\n} from '@angular/core';\n\nexport type LayoutDirection = 'ltr' | 'rtl';\n\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Applications should use this directive instead of the native attribute so that Material\n * components can listen on changes of direction.\n */\n@Directive({\n  selector: '[dir]',\n  // TODO(hansl): maybe `$implicit` isn't the best option here, but for now that's the best we got.\n  exportAs: '$implicit'\n})\nexport class Dir {\n  /** Layout direction of the element. */\n  @Input('dir') _dir: LayoutDirection = 'ltr';\n\n  /** Event emitted when the direction changes. */\n  @Output() dirChange = new EventEmitter<void>();\n\n  /** @docs-private */\n  @HostBinding('attr.dir')\n  get dir(): LayoutDirection {\n    return this._dir;\n  }\n  set dir(v: LayoutDirection) {\n    let old = this._dir;\n    this._dir = v;\n    if (old != this._dir) {\n      this.dirChange.emit();\n    }\n  }\n\n  /** Current layout direction of the element. */\n  get value(): LayoutDirection { return this.dir; }\n  set value(v: LayoutDirection) { this.dir = v; }\n}\n\n\n@NgModule({\n  exports: [Dir],\n  declarations: [Dir]\n})\nexport class RtlModule {\n  /** @deprecated */\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: RtlModule,\n      providers: []\n    };\n  }\n}\n"]}