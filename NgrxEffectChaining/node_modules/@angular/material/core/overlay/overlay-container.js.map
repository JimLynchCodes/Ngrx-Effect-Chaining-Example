{"version":3,"file":"overlay-container.js","sourceRoot":"","sources":["../../../../../src/lib/core/overlay/overlay-container.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EAAC,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAC,MAAM,eAAe;AAG5D;;;GAGG;AAEH;IAAA;IAwBA,CAAC;IArBC;;;;;OAKG;IACH,8CAAmB,GAAnB;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAAC,CAAC;QACzD,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAED;;;OAGG;IACO,2CAAgB,GAA1B;QACE,IAAI,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC9C,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;QACjD,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;QACrC,IAAI,CAAC,iBAAiB,GAAG,SAAS,CAAC;IACrC,CAAC;IAxBH;QAAC,UAAU,EAAE;;wBAAA;IAyBb,uBAAC;AAAD,CAAC,AAxBD,IAwBC;AAED,mDAAmD,eAAiC;IAClF,MAAM,CAAC,eAAe,IAAI,IAAI,gBAAgB,EAAE,CAAC;AACnD,CAAC;AAAA,CAAC;AAEF,OAAO,IAAM,0BAA0B,GAAG;IACxC,6FAA6F;IAC7F,OAAO,EAAE,gBAAgB;IACzB,IAAI,EAAE,CAAC,CAAC,IAAI,QAAQ,EAAE,EAAE,IAAI,QAAQ,EAAE,EAAE,gBAAgB,CAAC,CAAC;IAC1D,UAAU,EAAE,kCAAkC;CAC/C,CAAC","sourcesContent":["import {Injectable, Optional, SkipSelf} from '@angular/core';\n\n\n/**\n * The OverlayContainer is the container in which all overlays will load.\n * It should be provided in the root component to ensure it is properly shared.\n */\n@Injectable()\nexport class OverlayContainer {\n  protected _containerElement: HTMLElement;\n\n  /**\n   * This method returns the overlay container element.  It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement(): HTMLElement {\n    if (!this._containerElement) { this._createContainer(); }\n    return this._containerElement;\n  }\n\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n  protected _createContainer(): void {\n    let container = document.createElement('div');\n    container.classList.add('cdk-overlay-container');\n    document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\n\nexport function OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer: OverlayContainer) {\n  return parentContainer || new OverlayContainer();\n};\n\nexport const OVERLAY_CONTAINER_PROVIDER = {\n  // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n  provide: OverlayContainer,\n  deps: [[new Optional(), new SkipSelf(), OverlayContainer]],\n  useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n"]}