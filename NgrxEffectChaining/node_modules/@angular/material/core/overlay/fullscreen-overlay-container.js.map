{"version":3,"file":"fullscreen-overlay-container.js","sourceRoot":"","sources":["../../../../../src/lib/core/overlay/fullscreen-overlay-container.ts"],"names":[],"mappings":";;;;;;;;;;;;;;OAAO,EAAC,UAAU,EAAC,MAAM,eAAe;OACjC,EAAC,gBAAgB,EAAC,MAAM,qBAAqB;AAEpD;;;;;;;;GAQG;AAEH;IAAgD,8CAAgB;IAAhE;QAAgD,8BAAgB;IAuChE,CAAC;IAtCW,qDAAgB,GAA1B;QAAA,iBAIC;QAHC,gBAAK,CAAC,gBAAgB,WAAE,CAAC;QACzB,IAAI,CAAC,gCAAgC,EAAE,CAAC;QACxC,IAAI,CAAC,4BAA4B,CAAC,cAAM,OAAA,KAAI,CAAC,gCAAgC,EAAE,EAAvC,CAAuC,CAAC,CAAC;IACnF,CAAC;IAEO,qEAAgC,GAAxC;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC;QACT,CAAC;QACD,IAAI,iBAAiB,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;QACpD,IAAI,MAAM,GAAG,iBAAiB,IAAI,QAAQ,CAAC,IAAI,CAAC;QAChD,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAC7C,CAAC;IAEO,iEAA4B,GAApC,UAAqC,EAAc;QACjD,EAAE,CAAC,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAC/B,QAAQ,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC;QACpD,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,uBAAuB,CAAC,CAAC,CAAC;YAC5C,QAAQ,CAAC,gBAAgB,CAAC,wBAAwB,EAAE,EAAE,CAAC,CAAC;QAC1D,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAE,QAAgB,CAAC,oBAAoB,CAAC,CAAC,CAAC;YAClD,QAAQ,CAAC,gBAAgB,CAAC,qBAAqB,EAAE,EAAE,CAAC,CAAC;QACvD,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAE,QAAgB,CAAC,mBAAmB,CAAC,CAAC,CAAC;YACjD,QAAQ,CAAC,gBAAgB,CAAC,oBAAoB,EAAE,EAAE,CAAC,CAAC;QACtD,CAAC;IACH,CAAC;IAED;;;MAGE;IACF,yDAAoB,GAApB;QACE,MAAM,CAAC,QAAQ,CAAC,iBAAiB;YAC7B,QAAQ,CAAC,uBAAuB;YAC/B,QAAgB,CAAC,oBAAoB;YACrC,QAAgB,CAAC,mBAAmB;YACrC,IAAI,CAAC;IACX,CAAC;IAvCH;QAAC,UAAU,EAAE;;kCAAA;IAwCb,iCAAC;AAAD,CAAC,AAvCD,CAAgD,gBAAgB,GAuC/D","sourcesContent":["import {Injectable} from '@angular/core';\nimport {OverlayContainer} from './overlay-container';\n\n/**\n * The FullscreenOverlayContainer is the alternative to OverlayContainer\n * that supports correct displaying of overlay elements in Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n * It should be provided in the root component that way:\n * providers: [\n *   {provide: OverlayContainer, useClass: FullscreenOverlayContainer}\n * ],\n */\n@Injectable()\nexport class FullscreenOverlayContainer extends OverlayContainer {\n  protected _createContainer(): void {\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n  }\n\n  private _adjustParentForFullscreenChange(): void {\n    if (!this._containerElement) {\n      return;\n    }\n    let fullscreenElement = this.getFullscreenElement();\n    let parent = fullscreenElement || document.body;\n    parent.appendChild(this._containerElement);\n  }\n\n  private _addFullscreenChangeListener(fn: () => void) {\n    if (document.fullscreenEnabled) {\n      document.addEventListener('fullscreenchange', fn);\n    } else if (document.webkitFullscreenEnabled) {\n      document.addEventListener('webkitfullscreenchange', fn);\n    } else if ((document as any).mozFullScreenEnabled) {\n      document.addEventListener('mozfullscreenchange', fn);\n    } else if ((document as any).msFullscreenEnabled) {\n      document.addEventListener('MSFullscreenChange', fn);\n    }\n  }\n\n  /**\n   * When the page is put into fullscreen mode, a specific element is specified.\n   * Only that element and its children are visible when in fullscreen mode.\n  */\n  getFullscreenElement(): Element {\n    return document.fullscreenElement ||\n        document.webkitFullscreenElement ||\n        (document as any).mozFullScreenElement ||\n        (document as any).msFullscreenElement ||\n        null;\n  }\n}\n"]}