{"version":3,"file":"overlay.js","sourceRoot":"","sources":["../../../../../src/lib/core/overlay/overlay.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EACL,wBAAwB,EACxB,UAAU,EACV,cAAc,EACd,QAAQ,EACR,MAAM,EAEP,MAAM,eAAe;OACf,EAAC,YAAY,EAAC,MAAM,iBAAiB;OACrC,EAAC,aAAa,EAAC,MAAM,2BAA2B;OAChD,EAAC,UAAU,EAAC,MAAM,eAAe;OACjC,EAAC,sBAAsB,EAAC,MAAM,qCAAqC;OACnE,EAAC,uBAAuB,EAAC,MAAM,2BAA2B;OAC1D,EAAC,gBAAgB,EAAE,0BAA0B,EAAC,MAAM,qBAAqB;OACzE,EAAC,0BAA0B,EAAC,MAAM,4BAA4B;AAGrE,8BAA8B;AAC9B,IAAI,YAAY,GAAG,CAAC,CAAC;AAErB,oDAAoD;AACpD,IAAI,YAAY,GAAG,IAAI,YAAY,EAAE,CAAC;AAGtC;;;;;;;GAOG;AAEH;IACE,iBAAoB,iBAAmC,EACnC,yBAAmD,EACnD,gBAAwC,EACxC,OAAuB,EACvB,SAAmB,EACnB,OAAe;QALf,sBAAiB,GAAjB,iBAAiB,CAAkB;QACnC,8BAAyB,GAAzB,yBAAyB,CAA0B;QACnD,qBAAgB,GAAhB,gBAAgB,CAAwB;QACxC,YAAO,GAAP,OAAO,CAAgB;QACvB,cAAS,GAAT,SAAS,CAAU;QACnB,YAAO,GAAP,OAAO,CAAQ;IAAG,CAAC;IAEvC;;;;OAIG;IACH,wBAAM,GAAN,UAAO,KAAkC;QAAlC,qBAAkC,GAAlC,oBAAkC;QACvC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,kBAAkB,EAAE,EAAE,KAAK,CAAC,CAAC;IAClE,CAAC;IAED;;;OAGG;IACH,0BAAQ,GAAR;QACE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;IAED;;;OAGG;IACK,oCAAkB,GAA1B;QACE,IAAI,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACzC,IAAI,CAAC,EAAE,GAAG,iBAAe,YAAY,EAAI,CAAC;QAC1C,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAEvC,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAE/D,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IACK,mCAAiB,GAAzB,UAA0B,IAAiB;QACzC,MAAM,CAAC,IAAI,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,yBAAyB,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IAC/F,CAAC;IAED;;;;OAIG;IACK,mCAAiB,GAAzB,UAA0B,IAAiB,EAAE,KAAmB;QAC9D,MAAM,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IACjF,CAAC;IAxDF;QAAC,UAAU,EAAE;;eAAA;IAyDd,cAAC;AAAD,CAAC,AAxDD,IAwDC;AAED,yDAAyD;AACzD,OAAO,IAAM,iBAAiB,GAAe;IAC3C,OAAO;IACP,sBAAsB;IACtB,uBAAuB;IACvB,0BAA0B;IAC1B,0BAA0B;CAC3B,CAAC","sourcesContent":["import {\n  ComponentFactoryResolver,\n  Injectable,\n  ApplicationRef,\n  Injector,\n  NgZone,\n  Provider,\n} from '@angular/core';\nimport {OverlayState} from './overlay-state';\nimport {DomPortalHost} from '../portal/dom-portal-host';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {VIEWPORT_RULER_PROVIDER} from './position/viewport-ruler';\nimport {OverlayContainer, OVERLAY_CONTAINER_PROVIDER} from './overlay-container';\nimport {SCROLL_DISPATCHER_PROVIDER} from './scroll/scroll-dispatcher';\n\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n\n/** The default state for newly created overlays. */\nlet defaultState = new OverlayState();\n\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\n @Injectable()\nexport class Overlay {\n  constructor(private _overlayContainer: OverlayContainer,\n              private _componentFactoryResolver: ComponentFactoryResolver,\n              private _positionBuilder: OverlayPositionBuilder,\n              private _appRef: ApplicationRef,\n              private _injector: Injector,\n              private _ngZone: NgZone) {}\n\n  /**\n   * Creates an overlay.\n   * @param state State to apply to the overlay.\n   * @returns Reference to the created overlay.\n   */\n  create(state: OverlayState = defaultState): OverlayRef {\n    return this._createOverlayRef(this._createPaneElement(), state);\n  }\n\n  /**\n   * Returns a position builder that can be used, via fluent API,\n   * to construct and configure a position strategy.\n   */\n  position(): OverlayPositionBuilder {\n    return this._positionBuilder;\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  private _createPaneElement(): HTMLElement {\n    let pane = document.createElement('div');\n    pane.id = `cdk-overlay-${nextUniqueId++}`;\n    pane.classList.add('cdk-overlay-pane');\n\n    this._overlayContainer.getContainerElement().appendChild(pane);\n\n    return pane;\n  }\n\n  /**\n   * Create a DomPortalHost into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal host.\n   * @returns A portal host for the given DOM element.\n   */\n  private _createPortalHost(pane: HTMLElement): DomPortalHost {\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef, this._injector);\n  }\n\n  /**\n   * Creates an OverlayRef for an overlay in the given DOM element.\n   * @param pane DOM element for the overlay\n   * @param state\n   */\n  private _createOverlayRef(pane: HTMLElement, state: OverlayState): OverlayRef {\n    return new OverlayRef(this._createPortalHost(pane), pane, state, this._ngZone);\n  }\n}\n\n/** Providers for Overlay and its related injectables. */\nexport const OVERLAY_PROVIDERS: Provider[] = [\n  Overlay,\n  OverlayPositionBuilder,\n  VIEWPORT_RULER_PROVIDER,\n  SCROLL_DISPATCHER_PROVIDER,\n  OVERLAY_CONTAINER_PROVIDER,\n];\n"]}