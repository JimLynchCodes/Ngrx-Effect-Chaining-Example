{"version":3,"file":"focus-trap.js","sourceRoot":"","sources":["../../../../../src/lib/core/a11y/focus-trap.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, ViewEncapsulation, ViewChild, ElementRef, Input, NgZone} from '@angular/core';\nimport {InteractivityChecker} from './interactivity-checker';\nimport {coerceBooleanProperty} from '../coercion/boolean-property';\n\n\n/**\n * Directive for trapping focus within a region.\n *\n * NOTE: This directive currently uses a very simple (naive) approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like tabIndex > 0, flex `order`, and shadow roots can cause to two to misalign.\n * This will be replaced with a more intelligent solution before the library is considered stable.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'cdk-focus-trap, focus-trap',\n  templateUrl: 'focus-trap.html',\n  encapsulation: ViewEncapsulation.None,\n})\nexport class FocusTrap {\n  @ViewChild('trappedContent') trappedContent: ElementRef;\n\n  /** Whether the focus trap is active. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(val: boolean) { this._disabled = coerceBooleanProperty(val); }\n  private _disabled: boolean = false;\n\n  constructor(private _checker: InteractivityChecker, private _ngZone: NgZone) { }\n\n  /**\n   * Waits for microtask queue to empty, then focuses the first tabbable element within the focus\n   * trap region.\n   */\n  focusFirstTabbableElementWhenReady() {\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => {\n      this.focusFirstTabbableElement();\n    });\n  }\n\n  /**\n   * Waits for microtask queue to empty, then focuses the last tabbable element within the focus\n   * trap region.\n   */\n  focusLastTabbableElementWhenReady() {\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => {\n      this.focusLastTabbableElement();\n    });\n  }\n\n  /**\n   * Focuses the first tabbable element within the focus trap region.\n   */\n  focusFirstTabbableElement() {\n    let rootElement = this.trappedContent.nativeElement;\n    let redirectToElement = rootElement.querySelector('[cdk-focus-start]') as HTMLElement ||\n                            this._getFirstTabbableElement(rootElement);\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n  }\n\n  /**\n   * Focuses the last tabbable element within the focus trap region.\n   */\n  focusLastTabbableElement() {\n    let rootElement = this.trappedContent.nativeElement;\n    let focusTargets = rootElement.querySelectorAll('[cdk-focus-end]');\n    let redirectToElement: HTMLElement = null;\n\n    if (focusTargets.length) {\n      redirectToElement = focusTargets[focusTargets.length - 1] as HTMLElement;\n    } else {\n      redirectToElement = this._getLastTabbableElement(rootElement);\n    }\n\n    if (redirectToElement) {\n      redirectToElement.focus();\n    }\n  }\n\n  /** Get the first tabbable element from a DOM subtree (inclusive). */\n  private _getFirstTabbableElement(root: HTMLElement): HTMLElement {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in DOM order.\n    let childCount = root.children.length;\n    for (let i = 0; i < childCount; i++) {\n      let tabbableChild = this._getFirstTabbableElement(root.children[i] as HTMLElement);\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n\n  /** Get the last tabbable element from a DOM subtree (inclusive). */\n  private _getLastTabbableElement(root: HTMLElement): HTMLElement {\n    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n      return root;\n    }\n\n    // Iterate in reverse DOM order.\n    for (let i = root.children.length - 1; i >= 0; i--) {\n      let tabbableChild = this._getLastTabbableElement(root.children[i] as HTMLElement);\n      if (tabbableChild) {\n        return tabbableChild;\n      }\n    }\n\n    return null;\n  }\n}\n"]}