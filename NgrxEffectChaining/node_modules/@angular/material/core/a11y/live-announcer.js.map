{"version":3,"file":"live-announcer.js","sourceRoot":"","sources":["../../../../../src/lib/core/a11y/live-announcer.ts"],"names":[],"mappings":";;;;;;;;;;;;OAAO,EACL,UAAU,EACV,WAAW,EACX,QAAQ,EACR,MAAM,EACN,QAAQ,EACT,MAAM,eAAe;AAEtB,OAAO,IAAM,4BAA4B,GAAI,IAAI,WAAW,CAAC,sBAAsB,CAAC,CAAC;AAMrF;IAIE,uBAA8D,YAAiB;QAE7E,yFAAyF;QACzF,4FAA4F;QAC5F,iEAAiE;QACjE,IAAI,CAAC,YAAY,GAAG,YAAY,IAAI,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAChE,CAAC;IAED;;;;OAIG;IACH,gCAAQ,GAAR,UAAS,OAAe,EAAE,UAAyC;QAAnE,iBAYC;QAZyB,0BAAyC,GAAzC,qBAAyC;QACjE,IAAI,CAAC,YAAY,CAAC,WAAW,GAAG,EAAE,CAAC;QAEnC,6EAA6E;QAC7E,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;QAExD,iFAAiF;QACjF,wFAAwF;QACxF,2FAA2F;QAC3F,kEAAkE;QAClE,2CAA2C;QAC3C,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,YAAY,CAAC,WAAW,GAAG,OAAO,EAAvC,CAAuC,EAAE,GAAG,CAAC,CAAC;IACjE,CAAC;IAED,kDAAkD;IAClD,0CAAkB,GAAlB;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC;YACtD,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC9D,CAAC;IACH,CAAC;IAEO,0CAAkB,GAA1B;QACE,IAAI,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAE3C,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QAC5C,MAAM,CAAC,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;QAC3C,MAAM,CAAC,YAAY,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;QAE3C,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAElC,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAjDH;QAAC,UAAU,EAAE;mBAKE,QAAQ,EAAE;mBAAE,MAAM,CAAC,4BAA4B,CAAC;;qBALlD;IAmDb,oBAAC;AAAD,CAAC,AAlDD,IAkDC;AAED,gDAAgD,gBAA+B,EAAE,WAAgB;IAC/F,MAAM,CAAC,gBAAgB,IAAI,IAAI,aAAa,CAAC,WAAW,CAAC,CAAC;AAC5D,CAAC;AAAA,CAAC;AAEF,OAAO,IAAM,uBAAuB,GAAG;IACrC,yFAAyF;IACzF,OAAO,EAAE,aAAa;IACtB,IAAI,EAAE;QACJ,CAAC,IAAI,QAAQ,EAAE,EAAE,IAAI,QAAQ,EAAE,EAAE,aAAa,CAAC;QAC/C,CAAC,IAAI,QAAQ,EAAE,EAAE,IAAI,MAAM,CAAC,4BAA4B,CAAC,CAAC;KAC3D;IACD,UAAU,EAAE,+BAA+B;CAC5C,CAAC","sourcesContent":["import {\n  Injectable,\n  OpaqueToken,\n  Optional,\n  Inject,\n  SkipSelf,\n} from '@angular/core';\n\nexport const LIVE_ANNOUNCER_ELEMENT_TOKEN  = new OpaqueToken('liveAnnouncerElement');\n\n/** Possible politeness levels. */\nexport type AriaLivePoliteness = 'off' | 'polite' | 'assertive';\n\n@Injectable()\nexport class LiveAnnouncer {\n\n  private _liveElement: Element;\n\n  constructor(@Optional() @Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN) elementToken: any) {\n\n    // We inject the live element as `any` because the constructor signature cannot reference\n    // browser globals (HTMLElement) on non-browser environments, since having a class decorator\n    // causes TypeScript to preserve the constructor signature types.\n    this._liveElement = elementToken || this._createLiveElement();\n  }\n\n  /**\n   * Announces a message to screenreaders.\n   * @param message Message to be announced to the screenreader\n   * @param politeness The politeness of the announcer element\n   */\n  announce(message: string, politeness: AriaLivePoliteness = 'polite'): void {\n    this._liveElement.textContent = '';\n\n    // TODO: ensure changing the politeness works on all environments we support.\n    this._liveElement.setAttribute('aria-live', politeness);\n\n    // This 100ms timeout is necessary for some browser + screen-reader combinations:\n    // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n    // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n    //   second time without clearing and then using a non-zero delay.\n    // (using JAWS 17 at time of this writing).\n    setTimeout(() => this._liveElement.textContent = message, 100);\n  }\n\n  /** Removes the aria-live element from the DOM. */\n  _removeLiveElement() {\n    if (this._liveElement && this._liveElement.parentNode) {\n      this._liveElement.parentNode.removeChild(this._liveElement);\n    }\n  }\n\n  private _createLiveElement(): Element {\n    let liveEl = document.createElement('div');\n\n    liveEl.classList.add('cdk-visually-hidden');\n    liveEl.setAttribute('aria-atomic', 'true');\n    liveEl.setAttribute('aria-live', 'polite');\n\n    document.body.appendChild(liveEl);\n\n    return liveEl;\n  }\n\n}\n\nexport function LIVE_ANNOUNCER_PROVIDER_FACTORY(parentDispatcher: LiveAnnouncer, liveElement: any) {\n  return parentDispatcher || new LiveAnnouncer(liveElement);\n};\n\nexport const LIVE_ANNOUNCER_PROVIDER = {\n  // If there is already a LiveAnnouncer available, use that. Otherwise, provide a new one.\n  provide: LiveAnnouncer,\n  deps: [\n    [new Optional(), new SkipSelf(), LiveAnnouncer],\n    [new Optional(), new Inject(LIVE_ANNOUNCER_ELEMENT_TOKEN)]\n  ],\n  useFactory: LIVE_ANNOUNCER_PROVIDER_FACTORY\n};\n"]}