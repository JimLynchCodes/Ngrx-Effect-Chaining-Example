{"version":3,"file":"activedescendant-key-manager.js","sourceRoot":"","sources":["../../../../../src/lib/core/a11y/activedescendant-key-manager.ts"],"names":[],"mappings":";;;;;OACO,EAAC,cAAc,EAAa,MAAM,oBAAoB;AAY7D;IAAgD,8CAA6B;IAE3E,oCAAY,KAA+B;QACzC,kBAAM,KAAK,CAAC,CAAC;IACf,CAAC;IAED;;;;OAIG;IACH,kDAAa,GAAb,UAAc,KAAa;QACzB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE,CAAC;QACtC,CAAC;QACD,gBAAK,CAAC,aAAa,YAAC,KAAK,CAAC,CAAC;QAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,UAAU,CAAC,eAAe,EAAE,CAAC;QACpC,CAAC;IACH,CAAC;IAEH,iCAAC;AAAD,CAAC,AArBD,CAAgD,cAAc,GAqB7D","sourcesContent":["import {QueryList} from '@angular/core';\nimport {ListKeyManager, CanDisable} from './list-key-manager';\n\n/**\n * This is the interface for highlightable items (used by the ActiveDescendantKeyManager).\n * Each item must know how to style itself as active or inactive and whether or not it is\n * currently disabled.\n */\nexport interface Highlightable extends CanDisable {\n  setActiveStyles(): void;\n  setInactiveStyles(): void;\n}\n\nexport class ActiveDescendantKeyManager extends ListKeyManager<Highlightable> {\n\n  constructor(items: QueryList<Highlightable>) {\n    super(items);\n  }\n\n  /**\n   * This method sets the active item to the item at the specified index.\n   * It also adds active styles to the newly active item and removes active\n   * styles from the previously active item.\n   */\n  setActiveItem(index: number): void {\n    if (this.activeItem) {\n      this.activeItem.setInactiveStyles();\n    }\n    super.setActiveItem(index);\n    if (this.activeItem) {\n      this.activeItem.setActiveStyles();\n    }\n  }\n\n}\n"]}