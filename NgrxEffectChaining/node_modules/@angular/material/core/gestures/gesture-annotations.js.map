{"version":3,"file":"gesture-annotations.js","sourceRoot":"","sources":["../../../../../src/lib/core/gestures/gesture-annotations.ts"],"names":[],"mappings":"AAAA;;;;GAIG","sourcesContent":["/**\n * Stripped-down HammerJS annotations to be used within Material, which are necessary,\n * because HammerJS is an optional dependency. For the full annotations see:\n * https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/hammerjs\n */\n\n/** @docs-private */\nexport interface HammerInput {\n  preventDefault: () => {};\n  deltaX: number;\n  deltaY: number;\n  center: { x: number; y: number; };\n}\n\n/** @docs-private */\nexport interface HammerStatic {\n  new(element: HTMLElement | SVGElement, options?: any): HammerManager;\n\n  Pan: Recognizer;\n  Swipe: Recognizer;\n  Press: Recognizer;\n}\n\n/** @docs-private */\nexport interface Recognizer {\n  new(options?: any): Recognizer;\n  recognizeWith(otherRecognizer: Recognizer | string): Recognizer;\n}\n\n/** @docs-private */\nexport interface RecognizerStatic {\n  new(options?: any): Recognizer;\n}\n\n/** @docs-private */\nexport interface HammerInstance {\n  on(eventName: string, callback: Function): void;\n  off(eventName: string, callback: Function): void;\n}\n\n/** @docs-private */\nexport interface HammerManager {\n  add(recogniser: Recognizer | Recognizer[]): Recognizer;\n  set(options: any): HammerManager;\n  emit(event: string, data: any): void;\n  off(events: string, handler?: Function): void;\n  on(events: string, handler: Function): void;\n}\n"]}