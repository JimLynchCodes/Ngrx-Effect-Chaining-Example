{"version":3,"file":"gesture-config.js","sourceRoot":"","sources":["../../../../../src/lib/core/gestures/gesture-config.ts"],"names":[],"mappings":";;;;;;;;;;;;;;OAAO,EAAC,UAAU,EAAE,SAAS,EAAC,MAAM,eAAe;OAC5C,EAAC,mBAAmB,EAAC,MAAM,2BAA2B;AAG7D,2DAA2D;AAE3D;IAAmC,iCAAmB;IAapD;QACE,iBAAO,CAAC;QAbF,YAAO,GAAiB,OAAO,MAAM,KAAK,WAAW,GAAI,MAAc,CAAC,MAAM,GAAG,IAAI,CAAC;QAE9F,gEAAgE;QAChE,WAAM,GAAa,IAAI,CAAC,OAAO,GAAG;YAChC,WAAW;YACX,OAAO;YACP,YAAY;YACZ,UAAU;YACV,YAAY;YACZ,WAAW;SACZ,GAAG,EAAE,CAAC;QAKL,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,SAAS,EAAE,CAAC,CAAC,CAAC;YACjC,OAAO,CAAC,IAAI,CACV,oDAAoD;gBACpD,oCAAoC,CACrC,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;;;;;;;;;;;OAYG;IACH,mCAAW,GAAX,UAAY,OAAoB;QAC9B,IAAM,EAAE,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAErC,8BAA8B;QAC9B,IAAI,GAAG,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;QACjC,IAAI,KAAK,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QACrC,IAAI,KAAK,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QAErC,kFAAkF;QAClF,0DAA0D;QAC1D,+DAA+D;QAC/D,IAAI,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,EAAC,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,EAAC,EAAE,KAAK,CAAC,CAAC;QAC/E,IAAI,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,EAAC,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,GAAG,EAAC,CAAC,CAAC;QAE/E,4DAA4D;QAC5D,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAEzB,4CAA4C;QAC5C,EAAE,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC;QAE9C,MAAM,CAAC,EAAoB,CAAC;IAC9B,CAAC;IAED,sFAAsF;IAC9E,yCAAiB,GAAzB,UAA0B,IAAgB,EAAE,OAAY;QAAE,sBAA6B;aAA7B,WAA6B,CAA7B,sBAA6B,CAA7B,IAA6B;YAA7B,qCAA6B;;QACrF,IAAI,UAAU,GAAG,IAAK,IAAI,CAAC,WAAgC,CAAC,OAAO,CAAC,CAAC;QAErE,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxB,YAAY,CAAC,OAAO,CAAC,UAAA,IAAI,IAAI,OAAA,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,EAA9B,CAA8B,CAAC,CAAC;QAE7D,MAAM,CAAC,UAAU,CAAC;IACpB,CAAC;IArEH;QAAC,UAAU,EAAE;;qBAAA;IAuEb,oBAAC;AAAD,CAAC,AAtED,CAAmC,mBAAmB,GAsErD","sourcesContent":["import {Injectable, isDevMode} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {HammerStatic, HammerInstance, Recognizer, RecognizerStatic} from './gesture-annotations';\n\n/* Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /* List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor() {\n    super();\n\n    if (!this._hammer && isDevMode()) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material ' +\n        'components may not work correctly.'\n      );\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element);\n\n    // Default Hammer Recognizers.\n    let pan = new this._hammer.Pan();\n    let swipe = new this._hammer.Swipe();\n    let press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    let slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    let longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n"]}