{"version":3,"file":"autocomplete-trigger.js","sourceRoot":"","sources":["../../../../src/lib/autocomplete/autocomplete-trigger.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    AfterContentInit,\n    Directive,\n    ElementRef,\n    forwardRef,\n    Host,\n    Input,\n    NgZone,\n    Optional,\n    OnDestroy,\n    ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Overlay, OverlayRef, OverlayState, TemplatePortal} from '../core';\nimport {MdAutocomplete} from './autocomplete';\nimport {PositionStrategy} from '../core/overlay/position/position-strategy';\nimport {ConnectedPositionStrategy} from '../core/overlay/position/connected-position-strategy';\nimport {Observable} from 'rxjs/Observable';\nimport {MdOptionSelectEvent, MdOption} from '../core/option/option';\nimport {ActiveDescendantKeyManager} from '../core/a11y/activedescendant-key-manager';\nimport {ENTER, UP_ARROW, DOWN_ARROW} from '../core/keyboard/keycodes';\nimport {Dir} from '../core/rtl/dir';\nimport {Subscription} from 'rxjs/Subscription';\nimport {Subject} from 'rxjs/Subject';\nimport 'rxjs/add/observable/merge';\nimport 'rxjs/add/operator/startWith';\nimport 'rxjs/add/operator/switchMap';\nimport {MdInputContainer, FloatPlaceholderType} from '../input/input-container';\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MD_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdAutocompleteTrigger),\n  multi: true\n};\n\n@Directive({\n  selector: 'input[mdAutocomplete], input[matAutocomplete]',\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    'aria-multiline': 'false',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    '(focus)': 'openPanel()',\n    '(blur)': '_handleBlur($event.relatedTarget?.tagName)',\n    '(input)': '_handleInput($event.target.value)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MD_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MdAutocompleteTrigger implements AfterContentInit, ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef;\n  private _portal: TemplatePortal;\n  private _panelOpen: boolean = false;\n\n  /** The subscription to positioning changes in the autocomplete panel. */\n  private _panelPositionSubscription: Subscription;\n\n  /** Manages active item in option list based on key events. */\n  private _keyManager: ActiveDescendantKeyManager;\n  private _positionStrategy: ConnectedPositionStrategy;\n\n  /** Stream of blur events that should close the panel. */\n  private _blurStream = new Subject<any>();\n\n  /** View -> model callback called when value changes */\n  _onChange = (value: any) => {};\n\n  /** View -> model callback called when autocomplete has been touched */\n  _onTouched = () => {};\n\n  /* The autocomplete panel to be attached to this trigger. */\n  @Input('mdAutocomplete') autocomplete: MdAutocomplete;\n\n  /** Property with mat- prefix for no-conflict mode. */\n  @Input('matAutocomplete')\n  get _matAutocomplete(): MdAutocomplete {\n    return this.autocomplete;\n  }\n\n  set _matAutocomplete(autocomplete: MdAutocomplete) {\n    this.autocomplete = autocomplete;\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              @Optional() private _dir: Dir, private _zone: NgZone,\n              @Optional() @Host() private _inputContainer: MdInputContainer) {}\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager(this.autocomplete.options).withWrap();\n  }\n\n  ngOnDestroy() {\n    if (this._panelPositionSubscription) {\n      this._panelPositionSubscription.unsubscribe();\n    }\n\n    this._destroyPanel();\n  }\n\n  /* Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    if (!this._overlayRef) {\n      this._createOverlay();\n    }\n\n    if (!this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._subscribeToClosingActions();\n    }\n\n    this._panelOpen = true;\n    this._floatPlaceholder('always');\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._panelOpen = false;\n    this._floatPlaceholder('auto');\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MdOptionSelectEvent> {\n    return Observable.merge(\n        ...this.optionSelections,\n        this._blurStream.asObservable(),\n        this._keyManager.tabOut\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  get optionSelections(): Observable<MdOptionSelectEvent>[] {\n    return this.autocomplete.options.map(option => option.onSelect);\n  }\n\n  /** The currently active option, coerced to MdOption type. */\n  get activeOption(): MdOption {\n    return this._keyManager.activeItem as MdOption;\n  }\n\n  /**\n   * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.activeOption && event.keyCode === ENTER) {\n      this.activeOption._selectViaInteraction();\n    } else {\n      this._keyManager.onKeydown(event);\n      if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n        this.openPanel();\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(value: string): void {\n    this._onChange(value);\n    this.openPanel();\n  }\n\n  _handleBlur(newlyFocusedTag: string): void {\n    this._onTouched();\n\n    // Only emit blur event if the new focus is *not* on an option.\n    if (newlyFocusedTag !== 'MD-OPTION') {\n      this._blurStream.next(null);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the placeholder will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the placeholder until the panel can be closed.\n   */\n  private _floatPlaceholder(state: FloatPlaceholderType): void {\n    if (this._inputContainer) {\n      this._inputContainer.floatPlaceholder = state;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. The new scrollTop will be that offset - the panel height + the option\n   * height, so the active option will be just visible at the bottom of the panel.\n   */\n  private _scrollToOption(): void {\n    const optionOffset = this._keyManager.activeItemIndex * AUTOCOMPLETE_OPTION_HEIGHT;\n    const newScrollTop =\n        Math.max(0, optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT);\n    this.autocomplete._setScrollTop(newScrollTop);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): void {\n    // When the zone is stable initially, and when the option list changes...\n    Observable.merge(this._zone.onStable.first(), this.autocomplete.options.changes)\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        .switchMap(() => {\n          this._resetPanel();\n          return this.panelClosingActions;\n        })\n        // when the first closing event occurs...\n        .first()\n        // set the value, close the panel, and complete.\n        .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    this._element.nativeElement.value =\n        this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\n  }\n\n   /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MdOptionSelectEvent | null): void {\n    if (event) {\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n    }\n\n    this.closePanel();\n  }\n\n  private _createOverlay(): void {\n    this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n    this._overlayRef = this._overlay.create(this._getOverlayConfig());\n  }\n\n  private _getOverlayConfig(): OverlayState {\n    const overlayState = new OverlayState();\n    overlayState.positionStrategy = this._getOverlayPosition();\n    overlayState.width = this._getHostWidth();\n    overlayState.direction = this._dir ? this._dir.value : 'ltr';\n    return overlayState;\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy =  this._overlay.position().connectedTo(\n        this._element,\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    this._subscribeToPositionChanges(this._positionStrategy);\n    return this._positionStrategy;\n  }\n\n  /**\n   * This method subscribes to position changes in the autocomplete panel, so the panel's\n   * y-offset can be adjusted to match the new position.\n   */\n  private _subscribeToPositionChanges(strategy: ConnectedPositionStrategy) {\n    this._panelPositionSubscription = strategy.onPositionChange.subscribe(change => {\n      this.autocomplete.positionY = change.connectionPair.originY === 'top' ? 'above' : 'below';\n    });\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._element.nativeElement.getBoundingClientRect().width;\n  }\n\n  /** Reset active item to null so arrow events will activate the correct options.*/\n  private _resetActiveItem(): void {\n    this._keyManager.setActiveItem(null);\n  }\n\n  /**\n   * Resets the active item and re-calculates alignment of the panel in case its size\n   * has changed due to fewer or greater number of options.\n   */\n  private _resetPanel() {\n    this._resetActiveItem();\n    this._positionStrategy.recalculateLastPosition();\n    this.autocomplete._setVisibility();\n  }\n\n}\n\n"]}