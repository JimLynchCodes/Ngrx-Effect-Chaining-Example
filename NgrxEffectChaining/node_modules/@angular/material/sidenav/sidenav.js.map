{"version":3,"file":"sidenav.js","sourceRoot":"","sources":["../../../../src/lib/sidenav/sidenav.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  NgModule,\n  ModuleWithProviders,\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Renderer,\n  ViewEncapsulation,\n  ViewChild,\n  NgZone\n} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {Dir, MdError, coerceBooleanProperty, CompatibilityModule} from '../core';\nimport {A11yModule} from '../core/a11y/index';\nimport {FocusTrap} from '../core/a11y/focus-trap';\nimport {ESCAPE} from '../core/keyboard/keycodes';\nimport {OverlayModule} from '../core/overlay/overlay-directives';\nimport 'rxjs/add/operator/first';\n\n\n/** Exception thrown when two MdSidenav are matching the same side. */\nexport class MdDuplicatedSidenavError extends MdError {\n  constructor(align: string) {\n    super(`A sidenav was already declared for 'align=\"${align}\"'`);\n  }\n}\n\n\n/** Sidenav toggle promise result. */\nexport class MdSidenavToggleResult {\n  constructor(public type: 'open' | 'close', public animationFinished: boolean) {}\n}\n\n\n/**\n * <md-sidenav> component.\n *\n * This component corresponds to the drawer of the sidenav.\n *\n * Please refer to README.md for examples on how to use it.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'md-sidenav, mat-sidenav',\n  // TODO(mmalerba): move template to separate file.\n  templateUrl: 'sidenav.html',\n  host: {\n    '[class.mat-sidenav]': 'true',\n    '(transitionend)': '_onTransitionEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-sidenav-closed]': '_isClosed',\n    '[class.mat-sidenav-closing]': '_isClosing',\n    '[class.mat-sidenav-end]': '_isEnd',\n    '[class.mat-sidenav-opened]': '_isOpened',\n    '[class.mat-sidenav-opening]': '_isOpening',\n    '[class.mat-sidenav-over]': '_modeOver',\n    '[class.mat-sidenav-push]': '_modePush',\n    '[class.mat-sidenav-side]': '_modeSide',\n    '[class.mat-sidenav-invalid]': '!valid',\n    'tabIndex': '-1'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MdSidenav implements AfterContentInit {\n  @ViewChild(FocusTrap) _focusTrap: FocusTrap;\n\n  /** Alignment of the sidenav (direction neutral); whether 'start' or 'end'. */\n  private _align: 'start' | 'end' = 'start';\n\n  /** Whether this md-sidenav is part of a valid md-sidenav-container configuration. */\n  get valid() { return this._valid; }\n  set valid(value) {\n    value = coerceBooleanProperty(value);\n    // When the drawers are not in a valid configuration we close them all until they are in a valid\n    // configuration again.\n    if (!value) {\n      this.close();\n    }\n    this._valid = value;\n  }\n  private _valid = true;\n\n  /** Direction which the sidenav is aligned in. */\n  @Input()\n  get align() { return this._align; }\n  set align(value) {\n    // Make sure we have a valid value.\n    value = (value == 'end') ? 'end' : 'start';\n    if (value != this._align) {\n      this._align = value;\n      this.onAlignChanged.emit();\n    }\n  }\n\n  /** Mode of the sidenav; whether 'over' or 'side'. */\n  @Input() mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the sidenav can be closed with the escape key or not. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the sidenav is opened. */\n  _opened: boolean = false;\n\n  /** Event emitted when the sidenav is being opened. Use this to synchronize animations. */\n  @Output('open-start') onOpenStart = new EventEmitter<void>();\n\n  /** Event emitted when the sidenav is fully opened. */\n  @Output('open') onOpen = new EventEmitter<void>();\n\n  /** Event emitted when the sidenav is being closed. Use this to synchronize animations. */\n  @Output('close-start') onCloseStart = new EventEmitter<void>();\n\n  /** Event emitted when the sidenav is fully closed. */\n  @Output('close') onClose = new EventEmitter<void>();\n\n  /** Event emitted when the sidenav alignment changes. */\n  @Output('align-changed') onAlignChanged = new EventEmitter<void>();\n\n  /** The current toggle animation promise. `null` if no animation is in progress. */\n  private _toggleAnimationPromise: Promise<MdSidenavToggleResult> = null;\n\n  /**\n   * The current toggle animation promise resolution function.\n   * `null` if no animation is in progress.\n   */\n  private _resolveToggleAnimationPromise: (animationFinished: boolean) => void = null;\n\n  get isFocusTrapDisabled() {\n    // The focus trap is only enabled when the sidenav is open in any mode other than side.\n    return !this.opened || this.mode == 'side';\n  }\n\n  /**\n   * @param _elementRef The DOM element reference. Used for transition and width calculation.\n   *     If not available we do not hook on transitions.\n   */\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer) {\n    this.onOpen.subscribe(() => {\n      this._elementFocusedBeforeSidenavWasOpened = document.activeElement as HTMLElement;\n\n      if (!this.isFocusTrapDisabled) {\n        this._focusTrap.focusFirstTabbableElementWhenReady();\n      }\n    });\n\n    this.onClose.subscribe(() => {\n      if (this._elementFocusedBeforeSidenavWasOpened instanceof HTMLElement) {\n        this._renderer.invokeElementMethod(this._elementFocusedBeforeSidenavWasOpened, 'focus');\n      } else {\n        this._renderer.invokeElementMethod(this._elementRef.nativeElement, 'blur');\n      }\n\n      this._elementFocusedBeforeSidenavWasOpened = null;\n    });\n  }\n\n  ngAfterContentInit() {\n    // This can happen when the sidenav is set to opened in the template and the transition\n    // isn't ended.\n    if (this._toggleAnimationPromise) {\n      this._resolveToggleAnimationPromise(true);\n      this._toggleAnimationPromise = this._resolveToggleAnimationPromise = null;\n    }\n  }\n\n  /**\n   * Whether the sidenav is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(v: boolean) {\n    this.toggle(coerceBooleanProperty(v));\n  }\n\n\n  /** Open this sidenav, and return a Promise that will resolve when it's fully opened (or get\n   * rejected if it didn't). */\n  open(): Promise<MdSidenavToggleResult> {\n    return this.toggle(true);\n  }\n\n  /**\n   * Close this sidenav, and return a Promise that will resolve when it's fully closed (or get\n   * rejected if it didn't).\n   */\n  close(): Promise<MdSidenavToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this sidenav. This is equivalent to calling open() when it's already opened, or\n   * close() when it's closed.\n   * @param isOpen Whether the sidenav should be open.\n   * @returns Resolves with the result of whether the sidenav was opened or closed.\n   */\n  toggle(isOpen: boolean = !this.opened): Promise<MdSidenavToggleResult> {\n    if (!this.valid) {\n      return Promise.resolve(new MdSidenavToggleResult(isOpen ? 'open' : 'close', true));\n    }\n\n    // Shortcut it if we're already opened.\n    if (isOpen === this.opened) {\n      return this._toggleAnimationPromise ||\n          Promise.resolve(new MdSidenavToggleResult(isOpen ? 'open' : 'close', true));\n    }\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this.onOpenStart.emit();\n    } else {\n      this.onCloseStart.emit();\n    }\n\n    if (this._toggleAnimationPromise) {\n      this._resolveToggleAnimationPromise(false);\n    }\n    this._toggleAnimationPromise = new Promise<MdSidenavToggleResult>(resolve => {\n      this._resolveToggleAnimationPromise = animationFinished =>\n          resolve(new MdSidenavToggleResult(isOpen ? 'open' : 'close', animationFinished));\n    });\n    return this._toggleAnimationPromise;\n  }\n\n  /**\n   * Handles the keyboard events.\n   * @docs-private\n   */\n  handleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * When transition has finished, set the internal state for classes and emit the proper event.\n   * The event passed is actually of type TransitionEvent, but that type is not available in\n   * Android so we use any.\n   */\n  _onTransitionEnd(transitionEvent: TransitionEvent) {\n    if (transitionEvent.target == this._elementRef.nativeElement\n        // Simpler version to check for prefixes.\n        && transitionEvent.propertyName.endsWith('transform')) {\n      if (this._opened) {\n        this.onOpen.emit();\n      } else {\n        this.onClose.emit();\n      }\n\n      if (this._toggleAnimationPromise) {\n        this._resolveToggleAnimationPromise(true);\n        this._toggleAnimationPromise = this._resolveToggleAnimationPromise = null;\n      }\n    }\n  }\n\n  get _isClosing() {\n    return !this._opened && !!this._toggleAnimationPromise;\n  }\n  get _isOpening() {\n    return this._opened && !!this._toggleAnimationPromise;\n  }\n  get _isClosed() {\n    return !this._opened && !this._toggleAnimationPromise;\n  }\n  get _isOpened() {\n    return this._opened && !this._toggleAnimationPromise;\n  }\n  get _isEnd() {\n    return this.align == 'end';\n  }\n  get _modeSide() {\n    return this.mode == 'side';\n  }\n  get _modeOver() {\n    return this.mode == 'over';\n  }\n  get _modePush() {\n    return this.mode == 'push';\n  }\n\n  get _width() {\n    if (this._elementRef.nativeElement) {\n      return this._elementRef.nativeElement.offsetWidth;\n    }\n    return 0;\n  }\n\n  private _elementFocusedBeforeSidenavWasOpened: HTMLElement = null;\n}\n\n/**\n * <md-sidenav-container> component.\n *\n * This is the parent component to one or two <md-sidenav>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'md-sidenav-container, mat-sidenav-container',\n  // Do not use ChangeDetectionStrategy.OnPush. It does not work for this component because\n  // technically it is a sibling of MdSidenav (on the content tree) and isn't updated when MdSidenav\n  // changes its state.\n  templateUrl: 'sidenav-container.html',\n  styleUrls: [\n    'sidenav.css',\n    'sidenav-transitions.css',\n  ],\n  host: {\n    '[class.mat-sidenav-container]': 'true',\n    '[class.mat-sidenav-transition]': '_enableTransitions',\n  },\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MdSidenavContainer implements AfterContentInit {\n  @ContentChildren(MdSidenav) _sidenavs: QueryList<MdSidenav>;\n\n  /** The sidenav child with the `start` alignment. */\n  get start() { return this._start; }\n\n  /** The sidenav child with the `end` alignment. */\n  get end() { return this._end; }\n\n  /** Event emitted when the sidenav backdrop is clicked. */\n  @Output() backdropClick = new EventEmitter<void>();\n\n  /** The sidenav at the start/end alignment, independent of direction. */\n  private _start: MdSidenav;\n  private _end: MdSidenav;\n\n  /**\n   * The sidenav at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MdSidenav;\n  private _right: MdSidenav;\n\n  /** Whether to enable open/close trantions. */\n  _enableTransitions = false;\n\n  constructor(@Optional() private _dir: Dir, private _element: ElementRef,\n              private _renderer: Renderer, private _ngZone: NgZone) {\n    // If a `Dir` directive exists up the tree, listen direction changes and update the left/right\n    // properties to point to the proper start/end.\n    if (_dir != null) {\n      _dir.dirChange.subscribe(() => this._validateDrawers());\n    }\n  }\n\n  ngAfterContentInit() {\n    // On changes, assert on consistency.\n    this._sidenavs.changes.subscribe(() => this._validateDrawers());\n    this._sidenavs.forEach((sidenav: MdSidenav) => {\n      this._watchSidenavToggle(sidenav);\n      this._watchSidenavAlign(sidenav);\n    });\n    this._validateDrawers();\n\n    // Give the view a chance to render the initial state, then enable transitions.\n    this._ngZone.onMicrotaskEmpty.first().subscribe(() => this._enableTransitions = true);\n  }\n\n  /**\n   * Subscribes to sidenav events in order to set a class on the main container element when the\n   * sidenav is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchSidenavToggle(sidenav: MdSidenav): void {\n    if (!sidenav || sidenav.mode === 'side') { return; }\n    sidenav.onOpen.subscribe(() => this._setContainerClass(sidenav, true));\n    sidenav.onClose.subscribe(() => this._setContainerClass(sidenav, false));\n  }\n\n  /**\n   * Subscribes to sidenav onAlignChanged event in order to re-validate drawers when the align\n   * changes.\n   */\n  private _watchSidenavAlign(sidenav: MdSidenav): void {\n    if (!sidenav) { return; }\n    sidenav.onAlignChanged.subscribe(() => this._validateDrawers());\n  }\n\n  /** Toggles the 'mat-sidenav-opened' class on the main 'md-sidenav-container' element. */\n  private _setContainerClass(sidenav: MdSidenav, bool: boolean): void {\n    this._renderer.setElementClass(this._element.nativeElement, 'mat-sidenav-opened', bool);\n  }\n\n  /** Sets the valid state of the drawers. */\n  private _setDrawersValid(valid: boolean) {\n    this._sidenavs.forEach((sidenav) => {\n      sidenav.valid = valid;\n    });\n    if (!valid) {\n      this._start = this._end = this._left = this._right = null;\n    }\n  }\n\n  /** Validate the state of the sidenav children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end sidenav.\n    // NOTE: We must call toArray on _sidenavs even though it's iterable\n    // (see https://github.com/Microsoft/TypeScript/issues/3164).\n    for (let sidenav of this._sidenavs.toArray()) {\n      if (sidenav.align == 'end') {\n        if (this._end != null) {\n          this._setDrawersValid(false);\n          return;\n        }\n        this._end = sidenav;\n      } else {\n        if (this._start != null) {\n          this._setDrawersValid(false);\n          return;\n        }\n        this._start = sidenav;\n      }\n    }\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir == null || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n\n    this._setDrawersValid(true);\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalSidenav();\n  }\n\n  _closeModalSidenav() {\n    // Close all open sidenav's where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(sidenav => sidenav && !sidenav.disableClose && sidenav.mode !== 'side')\n      .forEach(sidenav => sidenav.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isSidenavOpen(this._start) && this._start.mode != 'side')\n        || (this._isSidenavOpen(this._end) && this._end.mode != 'side');\n  }\n\n  private _isSidenavOpen(side: MdSidenav): boolean {\n    return side != null && side.opened;\n  }\n\n  /**\n   * Return the width of the sidenav, if it's in the proper mode and opened.\n   * This may relayout the view, so do not call this often.\n   * @param sidenav\n   * @param mode\n   */\n  private _getSidenavEffectiveWidth(sidenav: MdSidenav, mode: string): number {\n    return (this._isSidenavOpen(sidenav) && sidenav.mode == mode) ? sidenav._width : 0;\n  }\n\n  _getMarginLeft() {\n    return this._getSidenavEffectiveWidth(this._left, 'side');\n  }\n\n  _getMarginRight() {\n    return this._getSidenavEffectiveWidth(this._right, 'side');\n  }\n\n  _getPositionLeft() {\n    return this._getSidenavEffectiveWidth(this._left, 'push');\n  }\n\n  _getPositionRight() {\n    return this._getSidenavEffectiveWidth(this._right, 'push');\n  }\n\n  /**\n   * Returns the horizontal offset for the content area.  There should never be a value for both\n   * left and right, so by subtracting the right value from the left value, we should always get\n   * the appropriate offset.\n   */\n  _getPositionOffset() {\n    return this._getPositionLeft() - this._getPositionRight();\n  }\n\n  /**\n   * This is using [ngStyle] rather than separate [style...] properties because [style.transform]\n   * doesn't seem to work right now.\n   */\n  _getStyles() {\n    return {\n      marginLeft: `${this._getMarginLeft()}px`,\n      marginRight: `${this._getMarginRight()}px`,\n      transform: `translate3d(${this._getPositionOffset()}px, 0, 0)`\n    };\n  }\n}\n\n\n@NgModule({\n  imports: [CommonModule, CompatibilityModule, A11yModule, OverlayModule],\n  exports: [MdSidenavContainer, MdSidenav, CompatibilityModule],\n  declarations: [MdSidenavContainer, MdSidenav],\n})\nexport class MdSidenavModule {\n  /** @deprecated */\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdSidenavModule,\n      providers: []\n    };\n  }\n}\n"]}