{"version":3,"file":"test-gesture-config.js","sourceRoot":"","sources":["../../../../src/lib/slider/test-gesture-config.ts"],"names":[],"mappings":";;;;;;;;;;;;;;OAAO,EAAC,UAAU,EAAC,MAAM,eAAe;OACjC,EAAC,aAAa,EAAgB,MAAM,SAAS;AAEpD;;;GAGG;AAEH;IAAuC,qCAAa;IAApD;QAAuC,8BAAa;QAClD;;;WAGG;QACH,oBAAe,GAAsC,IAAI,GAAG,EAAgC,CAAC;IAyB/F,CAAC;IAvBC;;OAEG;IACH,uCAAW,GAAX,UAAY,OAAoB;QAC9B,IAAI,EAAE,GAAG,gBAAK,CAAC,WAAW,YAAC,OAAO,CAAkB,CAAC;QAErD,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACtC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC7C,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1C,CAAC;QAED,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;IAED;;;OAGG;IACH,+CAAmB,GAAnB,UAAoB,SAAiB,EAAE,OAAoB,EAAE,SAAc;QAAd,yBAAc,GAAd,cAAc;QACzE,IAAI,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAClD,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,EAAnC,CAAmC,CAAC,CAAC;IACrE,CAAC;IA9BH;QAAC,UAAU,EAAE;;yBAAA;IA+Bb,wBAAC;AAAD,CAAC,AA9BD,CAAuC,aAAa,GA8BnD","sourcesContent":["import {Injectable} from '@angular/core';\nimport {GestureConfig, HammerManager} from '../core';\n\n/**\n * An extension of GestureConfig that exposes the underlying HammerManager instances.\n * Tests can use these instances to emit fake gesture events.\n */\n@Injectable()\nexport class TestGestureConfig extends GestureConfig {\n  /**\n   * A map of Hammer instances to element.\n   * Used to emit events over instances for an element.\n   */\n  hammerInstances: Map<HTMLElement, HammerManager[]> = new Map<HTMLElement, HammerManager[]>();\n\n  /**\n   * Create a mapping of Hammer instances to element so that events can be emitted during testing.\n   */\n  buildHammer(element: HTMLElement) {\n    let mc = super.buildHammer(element) as HammerManager;\n\n    if (this.hammerInstances.get(element)) {\n      this.hammerInstances.get(element).push(mc);\n    } else {\n      this.hammerInstances.set(element, [mc]);\n    }\n\n    return mc;\n  }\n\n  /**\n   * The Angular event plugin for Hammer creates a new HammerManager instance for each listener,\n   * so we need to apply our event on all instances to hit the correct listener.\n   */\n  emitEventForElement(eventType: string, element: HTMLElement, eventData = {}) {\n    let instances = this.hammerInstances.get(element);\n    instances.forEach(instance => instance.emit(eventType, eventData));\n  }\n}\n"]}