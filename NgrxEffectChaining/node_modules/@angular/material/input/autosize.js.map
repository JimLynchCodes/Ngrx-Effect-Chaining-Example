{"version":3,"file":"autosize.js","sourceRoot":"","sources":["../../../../src/lib/input/autosize.ts"],"names":[],"mappings":"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","sourcesContent":["import {Directive, ElementRef, Input, OnInit} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n@Directive({\n  selector: 'textarea[md-autosize], textarea[mdTextareaAutosize],' +\n            'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'mdTextareaAutosize',\n  host: {\n    '(input)': 'resizeToFitContent()',\n    '[style.min-height]': '_minHeight',\n    '[style.max-height]': '_maxHeight',\n  },\n})\nexport class MdTextareaAutosize implements OnInit {\n  /** Minimum number of rows for this textarea. */\n  @Input() minRows: number;\n\n  get mdAutosizeMinRows(): number {\n    return this.minRows;\n  }\n\n  @Input() set mdAutosizeMinRows(value: number) {\n    this.minRows = value;\n  }\n\n  /** Maximum number of rows for this textarea. */\n  @Input() maxRows: number;\n\n  get mdAutosizeMaxRows(): number {\n    return this.maxRows;\n  }\n\n  @Input() set mdAutosizeMaxRows(value: number) {\n    this.maxRows = value;\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(private _elementRef: ElementRef) { }\n\n  /** The minimum height of the textarea as determined by minRows. */\n  get _minHeight() {\n    return this.minRows ? `${this.minRows * this._cachedLineHeight}px` : null;\n  }\n\n  /** The maximum height of the textarea as determined by maxRows. */\n  get _maxHeight() {\n    return this.maxRows ? `${this.maxRows * this._cachedLineHeight}px` : null;\n  }\n\n  ngOnInit() {\n    this._cacheTextareaLineHeight();\n    this.resizeToFitContent();\n  }\n\n  /**\n   * Cache the height of a single-row textarea.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    let textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = textarea.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    textarea.parentNode.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.offsetHeight;\n    textarea.parentNode.removeChild(textareaClone);\n  }\n\n  /** Resize the textarea to fit its content. */\n  resizeToFitContent() {\n    let textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    textarea.style.height = 'auto';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  }\n}\n"]}