{"version":3,"file":"input-container.js","sourceRoot":"","sources":["../../../../src/lib/input/input-container.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  Input,\n  Directive,\n  AfterContentInit,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  QueryList,\n  ViewEncapsulation,\n  Optional,\n  Output,\n  EventEmitter,\n  Renderer\n} from '@angular/core';\nimport {coerceBooleanProperty} from '../core';\nimport {NgControl} from '@angular/forms';\nimport {getSupportedInputTypes} from '../core/platform/features';\nimport {\n  MdInputContainerUnsupportedTypeError,\n  MdInputContainerPlaceholderConflictError,\n  MdInputContainerDuplicatedHintError,\n  MdInputContainerMissingMdInputError\n} from './input-container-errors';\n\n\n// Invalid input type. Using one of these will throw an MdInputContainerUnsupportedTypeError.\nconst MD_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'color',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\n/** Type for the available floatPlaceholder values. */\nexport type FloatPlaceholderType = 'always' | 'never' | 'auto';\n\nlet nextUniqueId = 0;\n\n\n/**\n * The placeholder directive. The content can declare this to implement more\n * complex placeholders.\n */\n@Directive({\n  selector: 'md-placeholder, mat-placeholder'\n})\nexport class MdPlaceholder {}\n\n\n/** The hint directive, used to tag content as hint labels (going under the input). */\n@Directive({\n  selector: 'md-hint, mat-hint',\n  host: {\n    '[class.mat-hint]': 'true',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n  }\n})\nexport class MdHint {\n  // Whether to align the hint label at the start or end of the line.\n  @Input() align: 'start' | 'end' = 'start';\n\n  // Unique ID for the hint. Used for the aria-describedby on the input.\n  @Input() id: string = `md-input-hint-${nextUniqueId++}`;\n}\n\n\n/** The input directive, used to mark the input that `MdInputContainer` is wrapping. */\n@Directive({\n  selector: `input[mdInput], textarea[mdInput], input[matInput], textarea[matInput]`,\n  host: {\n    '[class.mat-input-element]': 'true',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.aria-describedby]': 'ariaDescribedby',\n    '(blur)': '_onBlur()',\n    '(focus)': '_onFocus()',\n    '(input)': '_onInput()',\n  }\n})\nexport class MdInputDirective {\n\n  /** Variables used as cache for getters and setters. */\n  private _type = 'text';\n  private _placeholder: string = '';\n  private _disabled = false;\n  private _required = false;\n  private _id: string;\n  private _cachedUid: string;\n\n  /** Whether the element is focused or not. */\n  focused = false;\n\n  /** Sets the aria-describedby attribute on the input for improved a11y. */\n  ariaDescribedby: string;\n\n  /** Whether the element is disabled. */\n  @Input()\n  get disabled() {\n    return this._ngControl ? this._ngControl.disabled : this._disabled;\n  }\n\n  set disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Unique id of the element. */\n  @Input()\n  get id() { return this._id; };\n  set id(value: string) {this._id = value || this._uid; }\n\n  /** Placeholder attribute of the element. */\n  @Input()\n  get placeholder() { return this._placeholder; }\n  set placeholder(value: string) {\n    if (this._placeholder !== value) {\n      this._placeholder = value;\n      this._placeholderChange.emit(this._placeholder);\n    }\n  }\n\n  /** Whether the element is required. */\n  @Input()\n  get required() { return this._required; }\n  set required(value: any) { this._required = coerceBooleanProperty(value); }\n\n  /** Input type of the element. */\n  @Input()\n  get type() { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._renderer.setElementProperty(this._elementRef.nativeElement, 'type', this._type);\n    }\n  }\n\n  /** The input element's value. */\n  get value() { return this._elementRef.nativeElement.value; }\n  set value(value: string) { this._elementRef.nativeElement.value = value; }\n\n  /**\n   * Emits an event when the placeholder changes so that the `md-input-container` can re-validate.\n   */\n  @Output() _placeholderChange = new EventEmitter<string>();\n\n  get empty() {\n    return !this._isNeverEmpty() &&\n        (this.value == null || this.value === '') &&\n        // Check if the input contains bad input. If so, we know that it only appears empty because\n        // the value failed to parse. From the user's perspective it is not empty.\n        // TODO(mmalerba): Add e2e test for bad input case.\n        !this._isBadInput();\n  }\n\n  private get _uid() { return this._cachedUid = this._cachedUid || `md-input-${nextUniqueId++}`; }\n\n  private _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(private _elementRef: ElementRef,\n              private _renderer: Renderer,\n              @Optional() public _ngControl: NgControl) {\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  /** Focuses the input element. */\n  focus() { this._renderer.invokeElementMethod(this._elementRef.nativeElement, 'focus'); }\n\n  _onFocus() { this.focused = true; }\n\n  _onBlur() { this.focused = false; }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Make sure the input is a supported type. */\n  private _validateType() {\n    if (MD_INPUT_INVALID_TYPES.indexOf(this._type) !== -1) {\n      throw new MdInputContainerUnsupportedTypeError(this._type);\n    }\n  }\n\n  private _isNeverEmpty() { return this._neverEmptyInputTypes.indexOf(this._type) !== -1; }\n\n  private _isBadInput() {\n    return (this._elementRef.nativeElement as HTMLInputElement).validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  private _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n    return nativeElement ? nativeElement.nodeName.toLowerCase() === 'textarea' : false;\n  }\n}\n\n\n/**\n * Component that represents a text input. It encapsulates the <input> HTMLElement and\n * improve on its behaviour, along with styling it according to the Material Design.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'md-input-container, mat-input-container',\n  templateUrl: 'input-container.html',\n  styleUrls: ['input-container.css'],\n  host: {\n    '[class.mat-input-container]': 'true',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '(click)': '_focusInput()',\n  },\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MdInputContainer implements AfterContentInit {\n  /** Alignment of the input container's content. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Color of the input divider, based on the theme. */\n  @Input() dividerColor: 'primary' | 'accent' | 'warn' = 'primary';\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat() { return this._floatPlaceholder === 'always'; };\n\n  /** Whether the placeholder can float or not. */\n  get _canPlaceholderFloat() { return this._floatPlaceholder !== 'never'; }\n\n  /** Text for the input hint. */\n  @Input()\n  get hintLabel() { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `md-input-hint-${nextUniqueId++}`;\n\n  /** Whether the placeholder should always float, never float or float as the user types. */\n  @Input()\n  get floatPlaceholder() { return this._floatPlaceholder; }\n  set floatPlaceholder(value: FloatPlaceholderType) {\n    this._floatPlaceholder = value || 'auto';\n  }\n  private _floatPlaceholder: FloatPlaceholderType = 'auto';\n\n  @ContentChild(MdInputDirective) _mdInputChild: MdInputDirective;\n\n  @ContentChild(MdPlaceholder) _placeholderChild: MdPlaceholder;\n\n  @ContentChildren(MdHint) _hintChildren: QueryList<MdHint>;\n\n  ngAfterContentInit() {\n    if (!this._mdInputChild) {\n      throw new MdInputContainerMissingMdInputError();\n    }\n\n    this._processHints();\n    this._validatePlaceholders();\n\n    // Re-validate when things change.\n    this._hintChildren.changes.subscribe(() => this._processHints());\n    this._mdInputChild._placeholderChange.subscribe(() => this._validatePlaceholders());\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let control = this._mdInputChild ? this._mdInputChild._ngControl : null;\n    return control && (control as any)[prop];\n  }\n\n  /** Whether the input has a placeholder. */\n  _hasPlaceholder() { return !!(this._mdInputChild.placeholder || this._placeholderChild); }\n\n  /** Focuses the underlying input. */\n  _focusInput() { this._mdInputChild.focus(); }\n\n  /**\n   * Ensure that there is only one placeholder (either `input` attribute or child element with the\n   * `md-placeholder` attribute.\n   */\n  private _validatePlaceholders() {\n    if (this._mdInputChild.placeholder && this._placeholderChild) {\n      throw new MdInputContainerPlaceholderConflictError();\n    }\n  }\n\n  /**\n   * Does any extra processing that is required when handling the hints.\n   */\n  private _processHints() {\n    this._validateHints();\n    this._syncAriaDescribedby();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<md-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MdHint = null;\n      let endHint: MdHint = null;\n      this._hintChildren.forEach((hint: MdHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw new MdInputContainerDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw new MdInputContainerDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the child input's `aria-describedby` to a space-separated list of the ids\n   * of the currently-specified hints, as well as a generated id for the hint label.\n   */\n  private _syncAriaDescribedby() {\n    let ids: string[] = [];\n    let startHint = this._hintChildren ?\n        this._hintChildren.find(hint => hint.align === 'start') : null;\n    let endHint = this._hintChildren ?\n        this._hintChildren.find(hint => hint.align === 'end') : null;\n\n    if (startHint) {\n      ids.push(startHint.id);\n    } else if (this._hintLabel) {\n      ids.push(this._hintLabelId);\n    }\n\n    if (endHint) {\n      ids.push(endHint.id);\n    }\n\n    this._mdInputChild.ariaDescribedby = ids.join(' ');\n  }\n}\n"]}