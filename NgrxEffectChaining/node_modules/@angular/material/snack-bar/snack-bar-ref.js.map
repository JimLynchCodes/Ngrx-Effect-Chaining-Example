{"version":3,"file":"snack-bar-ref.js","sourceRoot":"","sources":["../../../../src/lib/snack-bar/snack-bar-ref.ts"],"names":[],"mappings":"OAEO,EAAC,OAAO,EAAC,MAAM,cAAc;AAGpC,sDAAsD;AAEtD;;GAEG;AACH;IAuBE,uBAAY,QAAW,EACX,iBAAsC,EAC9B,WAAuB;QAzB7C,iBA8EC;QArDqB,gBAAW,GAAX,WAAW,CAAY;QAX3C,oEAAoE;QAC5D,iBAAY,GAAiB,IAAI,OAAO,EAAE,CAAC;QAKnD,2EAA2E;QACnE,cAAS,GAAiB,IAAI,OAAO,EAAE,CAAC;QAK9C,iEAAiE;QACjE,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,8BAA8B;QAC9B,IAAI,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,OAAO,EAAE,EAAd,CAAc,CAAC,CAAC;QAChD,iBAAiB,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,cAAM,OAAA,KAAI,CAAC,cAAc,EAAE,EAArB,CAAqB,CAAC,CAAC;IACrE,CAAC;IA5BD,sBAAI,mCAAQ;QADZ,4EAA4E;aAC5E;YACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC;;;OAAA;IA4BD,+BAA+B;IAC/B,+BAAO,GAAP;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;QAChC,CAAC;IACH,CAAC;IAED,yCAAyC;IACzC,+BAAO,GAAP;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;YAC3B,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;YACtB,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;QAC5B,CAAC;IACH,CAAC;IAED,mCAAmC;IACnC,6BAAK,GAAL;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;YACzB,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;QAC/B,CAAC;IACH,CAAC;IAED,uCAAuC;IAC/B,sCAAc,GAAtB;QACE,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;QAC3B,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;QACzB,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;IAC/B,CAAC;IAED,kFAAkF;IAClF,sCAAc,GAAd;QACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;IAC1C,CAAC;IAED,sFAAsF;IACtF,mCAAW,GAAX;QACE,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC;IAC3C,CAAC;IAED,+EAA+E;IAC/E,gCAAQ,GAAR;QACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC;IACvC,CAAC;IACH,oBAAC;AAAD,CAAC,AA9ED,IA8EC","sourcesContent":["import {OverlayRef} from '../core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MdSnackBarContainer} from './snack-bar-container';\n\n// TODO(josephperrott): Implement onAction observable.\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MdSnackBarRef<T> {\n  private _instance: T;\n\n  /** The instance of the component making up the content of the snack bar. */\n  get instance(): T {\n    return this._instance;\n  }\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MdSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has closed. */\n  private _afterClosed: Subject<any> = new Subject();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private _afterOpened: Subject<any>;\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private _onAction: Subject<any> = new Subject();\n\n  constructor(instance: T,\n              containerInstance: MdSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    // Sets the readonly instance of the snack bar content component.\n    this._instance = instance;\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit().subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterClosed.closed) {\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Marks the snackbar action clicked. */\n  _action(): void {\n    if (!this._onAction.closed) {\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n    this._afterClosed.next();\n    this._afterClosed.complete();\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<void> {\n    return this._afterClosed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter();\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n"]}