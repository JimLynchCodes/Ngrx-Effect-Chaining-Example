{"version":3,"file":"compiler_host.spec.js","sourceRoot":"","sources":["../../../../../tools/@angular/tsc-wrapped/test/compiler_host.spec.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;AAEH,IAAY,EAAE,WAAM,YAAY,CAAC,CAAA;AAEjC,8BAAqD,sBAAsB,CAAC,CAAA;AAC5E,6BAA4B,gBAAgB,CAAC,CAAA;AAE7C,QAAQ,CAAC,eAAe,EAAE;IACxB,qBAAqB,QAAgB,EAAE,MAAc;QACnD,IAAI,EAAE,GAAG,4BAAa,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QACzC,IAAI,IAAI,GAAc;YACpB,MAAM,EAAE,EAAE,CAAC,YAAY,CAAC,GAAG;YAC3B,KAAK,EAAE,EAAE;YACT,MAAM,EAAE,MAAM;YACd,QAAQ,EAAE,MAAM;YAChB,MAAM,EAAE,IAAI;SACb,CAAC;QAEF,iEAAiE;QACjE,+DAA+D;QAC/D,8DAA8D;QAC9D,IAAI,IAAI,GAAG,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;QACvC,IAAI,OAAO,GAAG,EAAE,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACjD,oEAAoE;QACpE,IAAI,KAAK,GAAG,iCAAiB,CAAC,EAAE,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC;QACjE,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAE1B,MAAM,CAAC,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED,EAAE,CAAC,2BAA2B,EAAE;QAC9B,IAAA,iDAA0E,EAAnE,eAAO,EAAE,YAAI,EAAE,YAAI,CAAiD;QAC3E,IAAM,WAAW,GAAG,IAAI,mCAAmB,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;QACjE,IAAM,CAAC,GAAG,WAAW,CAAC,aAAa,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QACxF,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE;QAC7C,IAAA,gFAC+E,EADxE,eAAO,EAAE,YAAI,EAAE,YAAI,CACsD;QAChF,IAAM,WAAW,GAAG,IAAI,mCAAmB,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;QACjE,IAAM,CAAC,GAAG,WAAW,CAAC,aAAa,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QACxF,MAAM,CAAC,iCAAiB,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC,iCAAiC,CAAC,CAAC;IAClG,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ts from 'typescript';\nimport NgOptions from '../src/options';\nimport {formatDiagnostics, TsickleCompilerHost} from '../src/compiler_host';\nimport {writeTempFile} from './test_support';\n\ndescribe('Compiler Host', () => {\n  function makeProgram(fileName: string, source: string): [ts.Program, ts.CompilerHost, NgOptions] {\n    let fn = writeTempFile(fileName, source);\n    let opts: NgOptions = {\n      target: ts.ScriptTarget.ES5,\n      types: [],\n      genDir: '/tmp',\n      basePath: '/tmp',\n      noEmit: true,\n    };\n\n    // TsickleCompilerHost wants a ts.Program, which is the result of\n    // parsing and typechecking the code before tsickle processing.\n    // So we must create and run the entire stack of CompilerHost.\n    let host = ts.createCompilerHost(opts);\n    let program = ts.createProgram([fn], opts, host);\n    // To get types resolved, you must first call getPreEmitDiagnostics.\n    let diags = formatDiagnostics(ts.getPreEmitDiagnostics(program));\n    expect(diags).toEqual('');\n\n    return [program, host, opts];\n  }\n\n  it('inserts JSDoc annotations', () => {\n    const [program, host, opts] = makeProgram('foo.ts', 'let x: number = 123');\n    const tsickleHost = new TsickleCompilerHost(host, program, opts);\n    const f = tsickleHost.getSourceFile(program.getRootFileNames()[0], ts.ScriptTarget.ES5);\n    expect(f.text).toContain('/** @type {?} */');\n  });\n\n  it('reports diagnostics about existing JSDoc', () => {\n    const [program, host, opts] =\n        makeProgram('error.ts', '/** @param {string} x*/ function f(x: string){};');\n    const tsickleHost = new TsickleCompilerHost(host, program, opts);\n    const f = tsickleHost.getSourceFile(program.getRootFileNames()[0], ts.ScriptTarget.ES5);\n    expect(formatDiagnostics(tsickleHost.diagnostics)).toContain('redundant with TypeScript types');\n  });\n});\n"]}