{"version":3,"file":"main.spec.js","sourceRoot":"","sources":["../../../../../tools/@angular/tsc-wrapped/test/main.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport {main} from '../src/main';\n\nimport {makeTempDir} from './test_support';\n\ndescribe('tsc-wrapped', () => {\n  let basePath: string;\n  let write: (fileName: string, content: string) => void;\n\n  beforeEach(() => {\n    basePath = makeTempDir();\n    write = (fileName: string, content: string) => {\n      fs.writeFileSync(path.join(basePath, fileName), content, {encoding: 'utf-8'});\n    };\n    write('decorators.ts', '/** @Annotation */ export var Component: Function;');\n    write('dep.ts', `\n      export const A = 1;\n      export const B = 2;\n    `);\n    write('test.ts', `\n      import {Component} from './decorators';\n      export * from './dep';\n\n      @Component({})\n      export class Comp {\n        /**\n         * Comment that is\n         * multiple lines\n         */\n        method(x: string): void {}\n      }\n    `);\n  });\n\n  function readOut(ext: string) {\n    return fs.readFileSync(path.join(basePath, 'built', `test.${ext}`), {encoding: 'utf-8'});\n  }\n\n  it('should report error if project not found', () => {\n    main('not-exist', null as any)\n        .then(() => fail('should report error'))\n        .catch(e => expect(e.message).toContain('ENOENT'));\n  });\n\n  it('should pre-process sources', (done) => {\n    write('tsconfig.json', `{\n      \"compilerOptions\": {\n        \"experimentalDecorators\": true,\n        \"types\": [],\n        \"outDir\": \"built\",\n        \"declaration\": true,\n        \"module\": \"es2015\"\n      },\n      \"angularCompilerOptions\": {\n        \"annotateForClosureCompiler\": true\n      },\n      \"files\": [\"test.ts\"]\n    }`);\n\n    main(basePath, {basePath})\n        .then(() => {\n          const out = readOut('js');\n          // No helpers since decorators were lowered\n          expect(out).not.toContain('__decorate');\n          // Expand `export *`\n          expect(out).toContain('export { A, B }');\n          // Annotated for Closure compiler\n          expect(out).toContain('* @param {?} x');\n          // Comments should stay multi-line\n          expect(out).not.toContain('Comment that is multiple lines');\n          // Decorator is now an annotation\n          expect(out).toMatch(/Comp.decorators = \\[\\s+\\{ type: Component/);\n          const decl = readOut('d.ts');\n          expect(decl).toContain('declare class Comp');\n          const metadata = readOut('metadata.json');\n          expect(metadata).toContain('\"Comp\":{\"__symbolic\":\"class\"');\n          done();\n        })\n        .catch(e => done.fail(e));\n  });\n\n  it('should allow all options disabled', (done) => {\n    write('tsconfig.json', `{\n      \"compilerOptions\": {\n        \"experimentalDecorators\": true,\n        \"types\": [],\n        \"outDir\": \"built\",\n        \"declaration\": false,\n        \"module\": \"es2015\"\n      },\n      \"angularCompilerOptions\": {\n        \"annotateForClosureCompiler\": false,\n        \"annotationsAs\": \"decorators\",\n        \"skipMetadataEmit\": true,\n        \"skipTemplateCodegen\": true\n      },\n      \"files\": [\"test.ts\"]\n    }`);\n\n    main(basePath, {basePath})\n        .then(() => {\n          const out = readOut('js');\n          // TypeScript's decorator emit\n          expect(out).toContain('__decorate');\n          // Not annotated for Closure compiler\n          expect(out).not.toContain('* @param {?} x');\n          expect(() => fs.accessSync(path.join(basePath, 'built', 'test.metadata.json'))).toThrow();\n          expect(() => fs.accessSync(path.join(basePath, 'built', 'test.d.ts'))).toThrow();\n          done();\n        })\n        .catch(e => done.fail(e));\n  });\n\n  it('should allow JSDoc annotations without decorator downleveling', (done) => {\n    write('tsconfig.json', `{\n      \"compilerOptions\": {\n        \"experimentalDecorators\": true,\n        \"types\": [],\n        \"outDir\": \"built\",\n        \"declaration\": true\n      },\n      \"angularCompilerOptions\": {\n        \"annotateForClosureCompiler\": true,\n        \"annotationsAs\": \"decorators\"\n      },\n      \"files\": [\"test.ts\"]\n    }`);\n    main(basePath, {basePath}).then(() => done()).catch(e => done.fail(e));\n  });\n\n  xit('should run quickly (performance baseline)', (done) => {\n    for (let i = 0; i < 1000; i++) {\n      write(`input${i}.ts`, `\n        import {Component} from './decorators';\n        @Component({})\n        export class Input${i} {\n          private __brand: string;\n        }\n      `);\n    }\n    write('tsconfig.json', `{\n      \"compilerOptions\": {\n        \"experimentalDecorators\": true,\n        \"types\": [],\n        \"outDir\": \"built\",\n        \"declaration\": true,\n        \"diagnostics\": true\n      },\n      \"angularCompilerOptions\": {\n        \"annotateForClosureCompiler\": false,\n        \"annotationsAs\": \"decorators\",\n        \"skipMetadataEmit\": true\n      },\n      \"include\": [\"input*.ts\"]\n    }`);\n    console.time('BASELINE');\n\n    main(basePath, {basePath})\n        .then(() => {\n          console.timeEnd('BASELINE');\n          done();\n        })\n        .catch(e => done.fail(e));\n  });\n\n  xit('should run quickly (performance test)', (done) => {\n    for (let i = 0; i < 1000; i++) {\n      write(`input${i}.ts`, `\n        import {Component} from './decorators';\n        @Component({})\n        export class Input${i} {\n          private __brand: string;\n        }\n      `);\n    }\n    write('tsconfig.json', `{\n      \"compilerOptions\": {\n        \"experimentalDecorators\": true,\n        \"types\": [],\n        \"outDir\": \"built\",\n        \"declaration\": true,\n        \"diagnostics\": true,\n        \"skipLibCheck\": true\n      },\n      \"angularCompilerOptions\": {\n        \"annotateForClosureCompiler\": true\n      },\n      \"include\": [\"input*.ts\"]\n    }`);\n    console.time('TSICKLE');\n\n    main(basePath, {basePath})\n        .then(() => {\n          console.timeEnd('TSICKLE');\n          done();\n        })\n        .catch(e => done.fail(e));\n  });\n});\n"]}