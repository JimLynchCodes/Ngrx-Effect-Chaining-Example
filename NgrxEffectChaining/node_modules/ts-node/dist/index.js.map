{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { relative, basename, extname, resolve, dirname, sep, join } from 'path'\nimport { readdirSync, writeFileSync, readFileSync, statSync } from 'fs'\nimport { EOL, tmpdir } from 'os'\nimport sourceMapSupport = require('source-map-support')\nimport extend = require('xtend')\nimport arrify = require('arrify')\nimport mkdirp = require('mkdirp')\nimport crypto = require('crypto')\nimport { BaseError } from 'make-error'\nimport * as TS from 'typescript'\nimport { loadSync } from 'tsconfig'\n\nconst pkg = require('../package.json')\nconst oldHandlers: { [key: string]: any } = {}\n\n/**\n * Common TypeScript interfaces between versions.\n */\nexport interface TSCommon {\n  version: typeof TS.version\n  sys: typeof TS.sys\n  ScriptSnapshot: typeof TS.ScriptSnapshot\n  displayPartsToString: typeof TS.displayPartsToString\n  createLanguageService: typeof TS.createLanguageService\n  getDefaultLibFilePath: typeof TS.getDefaultLibFilePath\n  getPreEmitDiagnostics: typeof TS.getPreEmitDiagnostics\n  flattenDiagnosticMessageText: typeof TS.flattenDiagnosticMessageText\n  transpileModule: typeof TS.transpileModule\n\n  // TypeScript 1.5+, 1.7+ added `fileExists` parameter.\n  findConfigFile (path: string, fileExists?: (path: string) => boolean): string\n\n  // TypeScript 1.5+, 1.7+ added `readFile` parameter.\n  readConfigFile (path: string, readFile?: (path: string) => string): {\n    config?: any\n    error?: TS.Diagnostic\n  }\n\n  // TypeScript 1.7+.\n  parseJsonConfigFileContent? (\n    json: any,\n    host: any,\n    basePath: string,\n    existingOptions: any,\n    configFileName: string\n  ): any\n\n  // TypeScript 1.5+.\n  parseConfigFile? (json: any, host: any, basePath: string): any\n}\n\n/**\n * Export the current version.\n */\nexport const VERSION = pkg.version\n\n/**\n * Registration options.\n */\nexport interface Options {\n  fast?: boolean\n  lazy?: boolean\n  cache?: boolean\n  cacheDirectory?: string\n  compiler?: string\n  project?: string\n  ignoreWarnings?: Array<number | string>\n  disableWarnings?: boolean\n  getFile?: (fileName: string) => string\n  getVersion?: (fileName: string) => string\n  fileExists?: (fileName: string) => boolean\n  compilerOptions?: any\n}\n\n/**\n * Track the project information.\n */\ninterface Project {\n  files: { [fileName: string]: boolean }\n  versions: { [fileName: string]: string }\n  maps: { [fileName: string]: string }\n  version: number\n}\n\n/**\n * Information retrieved from type info check.\n */\nexport interface TypeInfo {\n  name: string\n  comment: string\n}\n\n/**\n * Default register options.\n */\nconst DEFAULT_OPTIONS: Options = {\n  getFile,\n  getVersion,\n  fileExists,\n  cache: process.env.TS_NODE_CACHE,\n  cacheDirectory: process.env.TS_NODE_CACHE_DIRECTORY || join(tmpdir(), 'ts-node'),\n  disableWarnings: process.env.TS_NODE_DISABLE_WARNINGS,\n  compiler: process.env.TS_NODE_COMPILER,\n  project: process.env.TS_NODE_PROJECT,\n  ignoreWarnings: process.env.TS_NODE_IGNORE_WARNINGS,\n  fast: process.env.TS_NODE_FAST\n}\n\nexport interface Register {\n  cwd: string\n  compile (fileName: string): string\n  getTypeInfo (fileName: string, position: number): TypeInfo\n}\n\n/**\n * Register TypeScript compiler.\n */\nexport function register (opts?: Options): () => Register {\n  const options = extend(DEFAULT_OPTIONS, opts)\n  let result: Register\n\n  // Enable compiler overrides.\n  options.compiler = options.compiler || 'typescript'\n  options.ignoreWarnings = arrify(options.ignoreWarnings).map(Number)\n\n  // Parse compiler options as JSON.\n  options.compilerOptions = typeof options.compilerOptions === 'string' ?\n    JSON.parse(options.compilerOptions) :\n    options.compilerOptions\n\n  function load () {\n    const project: Project = { version: 0, files: {}, versions: {}, maps: {} }\n\n    // Install source map support and read from cache.\n    sourceMapSupport.install({\n      environment: 'node',\n      retrieveSourceMap (fileName: string) {\n        if (project.maps[fileName]) {\n          return {\n            url: project.maps[fileName],\n            map: options.getFile(project.maps[fileName])\n          }\n        }\n      }\n    })\n\n    // Require the TypeScript compiler and configuration.\n    const cwd = process.cwd()\n    const ts: typeof TS = require(options.compiler)\n    const config = readConfig(options, cwd, ts)\n    const configDiagnostics = formatDiagnostics(config.errors, options, cwd, ts)\n    const cachedir = join(resolve(cwd, options.cacheDirectory), getCompilerDigest(ts, options, config))\n\n    // Make sure the temp cache directory exists.\n    mkdirp.sync(cachedir)\n\n    // Render the configuration errors and exit the script.\n    if (configDiagnostics.length) {\n      throw new TSError(configDiagnostics)\n    }\n\n    // Enable `allowJs` when flag is set.\n    if (config.options.allowJs) {\n      registerExtension('.js')\n    }\n\n    // Add all files into the file hash.\n    for (const fileName of config.fileNames) {\n      project.files[fileName] = true\n    }\n\n    /**\n     * Create the basic required function using transpile mode.\n     */\n    let getOutput = function (fileName: string, contents: string): SourceOutput {\n      const result = ts.transpileModule(contents, {\n        fileName,\n        compilerOptions: config.options,\n        reportDiagnostics: true\n      })\n\n      const diagnosticList = result.diagnostics ?\n        formatDiagnostics(result.diagnostics, options, cwd, ts) :\n        []\n\n      if (diagnosticList.length) {\n        throw new TSError(diagnosticList)\n      }\n\n      return [result.outputText, result.sourceMapText]\n    }\n\n    let compile = readThrough(cachedir, options, project, getOutput)\n\n    let getTypeInfo = function (fileName: string, position: number): TypeInfo {\n      throw new TypeError(`No type information available under \"--fast\" mode`)\n    }\n\n    // Use full language services when the fast option is disabled.\n    if (!options.fast) {\n      const serviceHost = {\n        getScriptFileNames: () => Object.keys(project.files),\n        getProjectVersion: () => String(project.version),\n        getScriptVersion: (fileName: string) => versionFile(fileName),\n        getScriptSnapshot (fileName: string) {\n          if (!options.fileExists(fileName)) {\n            return undefined\n          }\n\n          return ts.ScriptSnapshot.fromString(options.getFile(fileName))\n        },\n        getDirectories: getDirectories,\n        directoryExists: directoryExists,\n        getNewLine: () => EOL,\n        getCurrentDirectory: () => cwd,\n        getCompilationSettings: () => config.options,\n        getDefaultLibFileName: (options: any) => ts.getDefaultLibFilePath(config.options)\n      }\n\n      const service = ts.createLanguageService(serviceHost)\n\n      const addAndVersionFile = function (fileName: string) {\n        // Add files to the hash before compilation.\n        project.files[fileName] = true\n\n        const currentVersion = project.versions[fileName]\n        const newVersion = versionFile(fileName)\n\n        // Increment the project version for file changes.\n        if (currentVersion !== newVersion) {\n          project.version++\n        }\n\n        return newVersion\n      }\n\n      const versionFile = function (fileName: string) {\n        const version = options.getVersion(fileName)\n        project.versions[fileName] = version\n        return version\n      }\n\n      getOutput = function (fileName: string) {\n        const output = service.getEmitOutput(fileName)\n\n        // Get the relevant diagnostics - this is 3x faster than `getPreEmitDiagnostics`.\n        const diagnostics = service.getCompilerOptionsDiagnostics()\n          .concat(service.getSyntacticDiagnostics(fileName))\n          .concat(service.getSemanticDiagnostics(fileName))\n\n        const diagnosticList = formatDiagnostics(diagnostics, options, cwd, ts)\n\n        if (output.emitSkipped) {\n          diagnosticList.push(`${relative(cwd, fileName)}: Emit skipped`)\n        }\n\n        if (diagnosticList.length) {\n          throw new TSError(diagnosticList)\n        }\n\n        return [output.outputFiles[1].text, output.outputFiles[0].text]\n      }\n\n      compile = readThrough(cachedir, options, project, function (fileName: string, contents: string) {\n        addAndVersionFile(fileName)\n\n        return getOutput(fileName, contents)\n      })\n\n      getTypeInfo = function (fileName: string, position: number) {\n        addAndVersionFile(fileName)\n\n        const info = service.getQuickInfoAtPosition(fileName, position)\n        const name = ts.displayPartsToString(info ? info.displayParts : [])\n        const comment = ts.displayPartsToString(info ? info.documentation : [])\n\n        return { name, comment }\n      }\n    }\n\n    return { cwd, compile, getOutput, getTypeInfo }\n  }\n\n  function service () {\n    return result || (result = load())\n  }\n\n  function loader (m: any, fileName: string) {\n    return m._compile(service().compile(fileName), fileName)\n  }\n\n  function shouldIgnore (filename: string) {\n    return relative(service().cwd, filename).split(sep).indexOf('node_modules') > -1\n  }\n\n  function registerExtension (ext: string) {\n    const old = oldHandlers[ext] || oldHandlers['.js'] || require.extensions['.js']\n\n    oldHandlers[ext] = require.extensions[ext]\n\n    require.extensions[ext] = function (m: any, filename: string) {\n      if (shouldIgnore(filename)) {\n        return old(m, filename)\n      }\n\n      return loader(m, filename)\n    }\n  }\n\n  // Eagerly register TypeScript extensions (JavaScript is registered lazily).\n  registerExtension('.ts')\n  registerExtension('.tsx')\n\n  // Immediately initialize the TypeScript compiler.\n  if (!options.lazy) {\n    service()\n  }\n\n  return service\n}\n\n/**\n * Load TypeScript configuration.\n */\nfunction readConfig (options: Options, cwd: string, ts: TSCommon) {\n  const result = loadSync(cwd, options.project)\n\n  result.config.compilerOptions = extend(\n    {\n      target: 'es5',\n      module: 'commonjs'\n    },\n    result.config.compilerOptions,\n    options.compilerOptions,\n    {\n      sourceMap: true,\n      inlineSourceMap: false,\n      inlineSources: true,\n      declaration: false,\n      noEmit: false,\n      outDir: '$$ts-node$$'\n    }\n  )\n\n  // Delete options that *should not* be passed through.\n  delete result.config.compilerOptions.out\n  delete result.config.compilerOptions.outFile\n\n  const basePath = result.path ? dirname(result.path) : cwd\n\n  if (typeof ts.parseConfigFile === 'function') {\n    return ts.parseConfigFile(result.config, ts.sys, basePath)\n  }\n\n  return ts.parseJsonConfigFileContent(result.config, ts.sys, basePath, null, result.path)\n}\n\n/**\n * Internal source output.\n */\ntype SourceOutput = [string, string]\n\n/**\n * Wrap the function with caching.\n */\nfunction readThrough (\n  cachedir: string,\n  options: Options,\n  project: Project,\n  compile: (fileName: string, contents: string) => SourceOutput\n) {\n  if (options.cache === false) {\n    return function (fileName: string) {\n      const contents = options.getFile(fileName)\n      const cachePath = join(cachedir, getCacheName(contents, fileName))\n      const sourceMapPath = `${cachePath}.js.map`\n      const out = compile(fileName, contents)\n\n      project.maps[fileName] = sourceMapPath\n\n      const output = updateOutput(out[0], fileName, sourceMapPath)\n      const sourceMap = updateSourceMap(out[1], fileName)\n\n      writeFileSync(sourceMapPath, sourceMap)\n\n      return output\n    }\n  }\n\n  return function (fileName: string) {\n    const contents = options.getFile(fileName)\n    const cachePath = join(cachedir, getCacheName(contents, fileName))\n    const outputPath = `${cachePath}.js`\n    const sourceMapPath = `${cachePath}.js.map`\n\n    project.maps[fileName] = sourceMapPath\n\n    // Use the cache when available.\n    if (options.fileExists(outputPath)) {\n      return options.getFile(outputPath)\n    }\n\n    const out = compile(fileName, contents)\n\n    const output = updateOutput(out[0], fileName, sourceMapPath)\n    const sourceMap = updateSourceMap(out[1], fileName)\n\n    writeFileSync(outputPath, output)\n    writeFileSync(sourceMapPath, sourceMap)\n\n    return output\n  }\n}\n\n/**\n * Update the output remapping the source map.\n */\nfunction updateOutput (outputText: string, fileName: string, sourceMapPath: string) {\n    // Replace the original extension (E.g. `.ts`).\n  const ext = extname(fileName)\n  const originalPath = basename(fileName).slice(0, -ext.length) + '.js.map'\n\n  return outputText.slice(0, -originalPath.length) + sourceMapPath.replace(/\\\\/g, '/')\n}\n\n/**\n * Update the source map contents for improved output.\n */\nfunction updateSourceMap (sourceMapText: string, fileName: string) {\n  const sourceMap = JSON.parse(sourceMapText)\n  sourceMap.file = fileName\n  sourceMap.sources = [fileName]\n  delete sourceMap.sourceRoot\n  return JSON.stringify(sourceMap)\n}\n\n/**\n * Get the file name for the cache entry.\n */\nfunction getCacheName (sourceCode: string, fileName: string) {\n  return crypto.createHash('sha1')\n    .update(extname(fileName), 'utf8')\n    .update('\\0', 'utf8')\n    .update(sourceCode, 'utf8')\n    .digest('hex')\n}\n\n/**\n * Create a hash of the current configuration.\n */\nfunction getCompilerDigest (ts: TSCommon, options: Options, config: any) {\n  return join(\n    crypto.createHash('sha1')\n      // TypeScript version.\n      .update(ts.version, 'utf8')\n      .update('\\0', 'utf8')\n      // Configuration options.\n      .update(JSON.stringify(options), 'utf8')\n      .update('\\0', 'utf8')\n      // Compiler options.\n      .update(JSON.stringify(config), 'utf8')\n      .digest('hex')\n  )\n}\n\n/**\n * Get the file version using the mod time.\n */\nexport function getVersion (fileName: string): string {\n  return String(statSync(fileName).mtime.getTime())\n}\n\n/**\n * Check if the file exists.\n */\nexport function fileExists (fileName: string): boolean {\n  try {\n    const stats = statSync(fileName)\n\n    return stats.isFile() || stats.isFIFO()\n  } catch (err) {\n    return false\n  }\n}\n\n/**\n * Get directories within a directory.\n */\nexport function getDirectories (path: string): string[] {\n  return readdirSync(path).filter(name => directoryExists(join(path, name)))\n}\n\n/**\n * Check if a directory exists.\n */\nexport function directoryExists (path: string): boolean {\n  try {\n    return statSync(path).isDirectory()\n  } catch (err) {\n    return false\n  }\n}\n\n/**\n * Get the file from the file system.\n */\nexport function getFile (fileName: string): string {\n  return readFileSync(fileName, 'utf8')\n}\n\n/**\n * Format an array of diagnostics.\n */\nfunction formatDiagnostics (diagnostics: TS.Diagnostic[], options: Options, cwd: string, ts: TSCommon) {\n  if (options.disableWarnings) {\n    return []\n  }\n\n  return diagnostics\n    .filter(function (diagnostic) {\n      return options.ignoreWarnings.indexOf(diagnostic.code) === -1\n    })\n    .map(function (diagnostic) {\n      return formatDiagnostic(diagnostic, cwd, ts)\n    })\n}\n\n/**\n * Format a diagnostic object into a string.\n */\nfunction formatDiagnostic (diagnostic: TS.Diagnostic, cwd: string, ts: TSCommon): string {\n  const message = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n')\n\n  if (diagnostic.file) {\n    const path = relative(cwd, diagnostic.file.fileName)\n    const { line, character } = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start)\n\n    return `${path} (${line + 1},${character + 1}): ${message} (${diagnostic.code})`\n  }\n\n  return `${message} (${diagnostic.code})`\n}\n\n/**\n * TypeScript diagnostics error.\n */\nexport class TSError extends BaseError {\n\n  name = 'TSError'\n  diagnostics: string[]\n\n  constructor (diagnostics: string[]) {\n    super(`⨯ Unable to compile TypeScript\\n${diagnostics.join('\\n')}`)\n    this.diagnostics = diagnostics\n  }\n\n}\n"]}