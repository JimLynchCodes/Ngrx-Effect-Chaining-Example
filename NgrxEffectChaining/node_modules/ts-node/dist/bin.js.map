{"version":3,"file":"bin.js","sourceRoot":"","sources":["../src/bin.ts"],"names":[],"mappings":";;AAEA,8BAAsB,eACtB,CAAC,CADoC;AACrC,qBAAqB,MAErB,CAAC,CAF0B;AAE3B,IAAM,IAAI,GAAG,CAAC,WAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAA;AACzC,IAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;AAElC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;IACrC,IAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;IACnB,IAAM,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;IAE9B,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QACb,KAAK,IAAI;YACP,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAA;YACvB,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YACjB,KAAK,CAAA;QACP,KAAK,OAAO,CAAC;QACb,KAAK,SAAS,CAAC;QACf,KAAK,aAAa;YAChB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;YACjB,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YACjB,KAAK,CAAA;QACP,KAAK,KAAK,CAAC;QACX,KAAK,aAAa;YAChB,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAA;YAC3B,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YACjB,KAAK,CAAA;QACP,KAAK,aAAa,CAAC;QACnB,KAAK,cAAc,CAAC;QACpB,KAAK,kBAAkB,CAAC;QACxB,KAAK,QAAQ,CAAC;QACd,KAAK,oBAAoB,CAAC;QAC1B,KAAK,qBAAqB,CAAC;QAC3B,KAAK,qBAAqB,CAAC;QAC3B,KAAK,cAAc,CAAC;QACpB,KAAK,wBAAwB,CAAC;QAC9B,KAAK,mBAAmB;YACtB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;YACjB,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YACjB,KAAK,CAAA;QACP;YACE,EAAE,CAAC,CAAC,sDAAsD,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACrE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;gBACjB,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YACnB,CAAC;YACD,KAAK,CAAA;IACT,CAAC;IAGD,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACtB,KAAK,CAAA;IACP,CAAC;AACH,CAAC;AAED,IAAM,IAAI,GAAG,qBAAK,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAA;AAE7E,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,UAAU,IAAY,EAAE,MAAc;IACpD,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE;QACjB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACX,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,MAAM,CAAC,CAAA;QACnC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACpB,CAAC;IACH,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["#!/usr/bin/env node\n\nimport { spawn } from 'child_process'\nimport { join } from 'path'\n\nconst args = [join(__dirname, '_bin.js')]\nconst opts = process.argv.slice(2)\n\nfor (let i = 0; i < opts.length; i++) {\n  const arg = opts[i]\n  const flag = arg.split('=')[0]\n\n  switch (flag) {\n    case '-d':\n      args.unshift('--debug')\n      opts.splice(i, 1)\n      break\n    case 'debug':\n    case '--debug':\n    case '--debug-brk':\n      args.unshift(arg)\n      opts.splice(i, 1)\n      break\n    case '-gc':\n    case '--expose-gc':\n      args.unshift('--expose-gc')\n      opts.splice(i, 1)\n      break\n    case '--gc-global':\n    case '--es_staging':\n    case '--no-deprecation':\n    case '--prof':\n    case '--log-timer-events':\n    case '--throw-deprecation':\n    case '--trace-deprecation':\n    case '--use_strict':\n    case '--allow-natives-syntax':\n    case '--perf-basic-prof':\n      args.unshift(arg)\n      opts.splice(i, 1)\n      break\n    default:\n      if (/^--(?:harmony|trace|icu-data-dir|max-old-space-size)/.test(arg)) {\n        args.unshift(arg)\n        opts.splice(i, 1)\n      }\n      break\n  }\n\n  // Stop on first non-argument because it's the script name.\n  if (/^[^-]/.test(arg)) {\n    break\n  }\n}\n\nconst proc = spawn(process.execPath, args.concat(opts), { stdio: 'inherit' })\n\nproc.on('exit', function (code: number, signal: string) {\n  process.on('exit', function () {\n    if (signal) {\n      process.kill(process.pid, signal)\n    } else {\n      process.exit(code)\n    }\n  })\n})\n"]}