{"version":3,"file":"_bin.js","sourceRoot":"","sources":["../src/_bin.ts"],"names":[],"mappings":"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","sourcesContent":["import { join, resolve } from 'path'\nimport { start } from 'repl'\nimport { inspect } from 'util'\nimport arrify = require('arrify')\nimport extend = require('xtend')\nimport Module = require('module')\nimport minimist = require('minimist')\nimport chalk = require('chalk')\nimport { diffLines } from 'diff'\nimport { createScript } from 'vm'\nimport { register, VERSION, getFile, getVersion, fileExists, TSError } from './index'\n\ninterface Argv {\n  eval?: string\n  print?: string\n  fast?: boolean\n  lazy?: boolean\n  cache?: boolean\n  cacheDirectory?: string\n  version?: boolean\n  help?: boolean\n  compiler?: string\n  project?: string\n  ignoreWarnings?: string | string[]\n  disableWarnings?: boolean\n  compilerOptions?: any\n  _: string[]\n}\n\nconst strings = ['eval', 'print', 'compiler', 'project', 'ignoreWarnings', 'cacheDirectory']\nconst booleans = ['help', 'fast', 'lazy', 'version', 'disableWarnings', 'cache']\n\nconst aliases: { [key: string]: string[] } = {\n  help: ['h'],\n  fast: ['F'],\n  lazy: ['L'],\n  version: ['v'],\n  eval: ['e'],\n  print: ['p'],\n  project: ['P'],\n  compiler: ['C'],\n  cacheDirectory: ['cache-directory'],\n  ignoreWarnings: ['I', 'ignore-warnings'],\n  disableWarnings: ['D', 'disable-warnings'],\n  compilerOptions: ['O', 'compiler-options']\n}\n\nlet stop = process.argv.length\n\nfunction isFlagOnly (arg: string) {\n  const name = arg.replace(/^--?/, '')\n\n  // The value is part of this argument.\n  if (/=/.test(name)) {\n    return true\n  }\n\n  for (const bool of booleans) {\n    if (name === bool) {\n      return true\n    }\n\n    const alias = aliases[bool]\n\n    if (alias) {\n      for (const other of alias) {\n        if (other === name) {\n          return true\n        }\n      }\n    }\n  }\n\n  return false\n}\n\n// Hack around known subarg issue with `stopEarly`.\nfor (let i = 2; i < process.argv.length; i++) {\n  const arg = process.argv[i]\n  const next = process.argv[i + 1]\n\n  if (/^\\[/.test(arg) || /\\]$/.test(arg)) {\n    continue\n  }\n\n  if (/^-/.test(arg)) {\n    // Skip next argument.\n    if (!isFlagOnly(arg) && !/^-/.test(next)) {\n      i++\n    }\n\n    continue\n  }\n\n  stop = i\n  break\n}\n\nconst argv = minimist<Argv>(process.argv.slice(2, stop), {\n  string: strings,\n  boolean: booleans,\n  alias: aliases,\n  default: {\n    cache: true\n  }\n})\n\nif (argv.version) {\n  console.log(`ts-node v${VERSION}`)\n  console.log(`node ${process.version}`)\n  process.exit(0)\n}\n\nif (argv.help) {\n  console.log(`\nUsage: ts-node [options] [ -e script | script.ts ] [arguments]\n\nOptions:\n\n  -e, --eval [code]             Evaluate code\n  -p, --print [code]            Evaluate code and print result\n  -C, --compiler [name]         Specify a custom TypeScript compiler\n  -I, --ignoreWarnings [code]   Ignore TypeScript warnings by diagnostic code\n  -D, --disableWarnings         Ignore every TypeScript warning\n  -P, --project [path]          Path to TypeScript project (or \\`false\\`)\n  -O, --compilerOptions [opts]  JSON compiler options to merge with compilation\n  -L, --lazy                    Lazily load TypeScript compilation\n  -F, --fast                    Run TypeScript compilation in transpile mode\n  --no-cache                    Disable the TypeScript cache\n  --cache-directory             Configure the TypeScript cache directory\n`)\n\n  process.exit(0)\n}\n\n/**\n * Override `process.emit` for clearer compiler errors.\n */\nconst _emit = process.emit\n\nprocess.emit = function (type, error): boolean {\n  // Print the error message when no other listeners are present.\n  if (type === 'uncaughtException' && error instanceof TSError && process.listeners(type).length === 0) {\n    printAndExit(error)\n  }\n\n  return _emit.apply(this, arguments)\n}\n\nconst cwd = process.cwd()\nconst code = argv.eval == null ? argv.print : argv.eval\nconst isEvalScript = typeof argv.eval === 'string' || !!argv.print // Minimist struggles with empty strings.\nconst isEval = isEvalScript || stop === process.argv.length\nconst isPrinted = argv.print != null\n\n// Register the TypeScript compiler instance.\nconst service = register(extend(argv, {\n  getFile: isEval ? getFileEval : getFile,\n  getVersion: isEval ? getVersionEval : getVersion,\n  fileExists: isEval ? fileExistsEval : fileExists,\n  ignoreWarnings: arrify(argv.ignoreWarnings)\n}))\n\n// TypeScript files must always end with `.ts`.\nconst EVAL_FILENAME = '[eval].ts'\nconst EVAL_PATH = join(cwd, EVAL_FILENAME)\n\n// Store eval contents for in-memory lookups.\nconst evalFile = { input: '', output: '', version: 0 }\n\nif (isEvalScript) {\n  evalAndExit(code, isPrinted)\n} else {\n  if (stop < process.argv.length) {\n    const args = process.argv.slice(stop)\n    args[0] = resolve(cwd, args[0])\n    process.argv = ['node'].concat(args)\n    process.execArgv.unshift(__filename)\n    Module.runMain()\n  } else {\n    // Piping of execution _only_ occurs when no other script is specified.\n    if ((process.stdin as any).isTTY) {\n      startRepl()\n    } else {\n      let code = ''\n      process.stdin.on('data', (chunk: Buffer) => code += chunk)\n      process.stdin.on('end', () => evalAndExit(code, isPrinted))\n    }\n  }\n}\n\n/**\n * Evaluate a script.\n */\nfunction evalAndExit (code: string, isPrinted: boolean) {\n  global.__filename = EVAL_FILENAME\n  global.__dirname = cwd\n\n  const module = new Module(global.__filename)\n  module.filename = global.__filename\n  module.paths = Module._nodeModulePaths(global.__dirname)\n\n  global.exports = module.exports\n  global.module = module\n  global.require = module.require.bind(module)\n\n  let result: any\n\n  try {\n    result = _eval(code, global)\n  } catch (error) {\n    if (error instanceof TSError) {\n      printAndExit(error)\n    }\n\n    throw error\n  }\n\n  if (isPrinted) {\n    console.log(typeof result === 'string' ? result : inspect(result))\n  }\n\n  process.exit(0)\n}\n\n/**\n * Stringify the `TSError` instance.\n */\nfunction print (error: TSError) {\n  return chalk.bold(`${chalk.red('⨯')} Unable to compile TypeScript`) + `\\n${error.diagnostics.join('\\n')}`\n}\n\n/**\n * Print the error and exit.\n */\nfunction printAndExit (error: TSError) {\n  console.error(print(error))\n  process.exit(1)\n}\n\n/**\n * Evaluate the code snippet.\n */\nfunction _eval (code: string, context: any) {\n  const undo = evalFile.input\n  const isCompletion = !/\\n$/.test(code)\n\n  // Increment eval constants for the compiler to pick up changes.\n  evalFile.input += code\n  evalFile.version++\n\n  let output: string\n\n  // Undo on TypeScript compilation errors.\n  try {\n    output = service().compile(EVAL_PATH)\n  } catch (error) {\n    evalFile.input = undo\n\n    throw error\n  }\n\n  // Use `diff` to check for new JavaScript to execute.\n  const changes = diffLines(evalFile.output, output)\n\n  // Revert the code if running in \"completion\" environment. Updated the output\n  // to diff against future executions when evaling code.\n  if (isCompletion) {\n    evalFile.input = undo\n  } else {\n    evalFile.output = output\n  }\n\n  let result: any\n\n  // Iterate over the diff and evaluate `added` lines. The only removed lines\n  // should be the source map and lines that stay the same are ignored.\n  for (const change of changes) {\n    if (change.added) {\n      const script = createScript(change.value, EVAL_FILENAME)\n\n      result = script.runInNewContext(context)\n    }\n  }\n\n  return result\n}\n\n/**\n * Start a CLI REPL.\n */\nfunction startRepl () {\n  const repl = start({\n    prompt: '> ',\n    input: process.stdin,\n    output: process.stdout,\n    eval: replEval,\n    useGlobal: false\n  })\n\n  // Reset eval file information when repl is reset.\n  repl.on('reset', () => {\n    evalFile.input = ''\n    evalFile.output = ''\n    evalFile.version = 0\n  })\n\n  ;(repl as any).defineCommand('type', {\n    help: 'Check the type of a TypeScript identifier',\n    action: function (identifier: string) {\n      if (!identifier) {\n        ;(repl as any).displayPrompt()\n        return\n      }\n\n      const undo = evalFile.input\n\n      evalFile.input += identifier\n      evalFile.version++\n\n      const { name, comment } = service().getTypeInfo(EVAL_PATH, evalFile.input.length)\n\n      ;(repl as any).outputStream.write(`${chalk.bold(name)}\\n${comment ? `${comment}\\n` : ''}`)\n      ;(repl as any).displayPrompt()\n\n      evalFile.input = undo\n    }\n  })\n}\n\n/**\n * Eval code from the REPL.\n */\nfunction replEval (code: string, context: any, filename: string, callback: (err?: Error, result?: any) => any) {\n  let err: any\n  let result: any\n\n  // TODO: Figure out how to handle completion here.\n  if (code === '.scope') {\n    callback()\n    return\n  }\n\n  try {\n    result = _eval(code, context)\n  } catch (error) {\n    if (error instanceof TSError) {\n      err = print(error)\n    } else {\n      err = error\n    }\n  }\n\n  callback(err, result)\n}\n\n/**\n * Get the file text, checking for eval first.\n */\nfunction getFileEval (fileName: string) {\n  return fileName === EVAL_PATH ? evalFile.input : getFile(fileName)\n}\n\n/**\n * Get the file version, checking for eval first.\n */\nfunction getVersionEval (fileName: string) {\n  return fileName === EVAL_PATH ? String(evalFile.version) : getVersion(fileName)\n}\n\n/**\n * Get whether the file exists.\n */\nfunction fileExistsEval (fileName: string) {\n  return fileName === EVAL_PATH ? true : fileExists(fileName)\n}\n"]}