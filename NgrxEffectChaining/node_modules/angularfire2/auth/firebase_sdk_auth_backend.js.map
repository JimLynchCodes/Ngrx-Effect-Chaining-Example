{"version":3,"file":"firebase_sdk_auth_backend.js","sourceRoot":"","sources":["../../src/auth/firebase_sdk_auth_backend.ts"],"names":[],"mappings":"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","sourcesContent":["import * as firebase from 'firebase';\nimport { Injectable, Inject } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\nimport { FirebaseApp } from '../tokens';\nimport { ZoneScheduler } from '../utils';\nimport {\n  authDataToAuthState,\n  AuthBackend,\n  AuthProviders,\n  AuthMethods,\n  FirebaseAuthState,\n  EmailPasswordCredentials\n} from './auth_backend';\n\nconst {\n  FacebookAuthProvider,\n  GithubAuthProvider,\n  GoogleAuthProvider,\n  TwitterAuthProvider\n} = firebase.auth;\n\nimport { map } from 'rxjs/operator/map';\nimport { fromPromise } from 'rxjs/observable/fromPromise';\nimport { observeOn } from 'rxjs/operator/observeOn';\n\n@Injectable()\nexport class FirebaseSdkAuthBackend extends AuthBackend {\n  _fbAuth: firebase.auth.Auth;\n  /**\n   * TODO(jeffbcross): change _fbApp type back to firebase.app.App\n   * An issue with AoT compiler does not allow interface types on\n   * constructor parameters, even when used in conjunction with @Inject.\n   * https://github.com/angular/angular/issues/12631\n   * https://github.com/angular/angularfire2/issues/653\n   **/\n  constructor(@Inject(FirebaseApp) _fbApp: any) {\n    super();\n    this._fbAuth = _fbApp.auth();\n  }\n\n  createUser(creds: EmailPasswordCredentials): Promise<FirebaseAuthState> {\n    return castPromise<firebase.User>(this._fbAuth.createUserWithEmailAndPassword(creds.email, creds.password))\n      .then((user: firebase.User) => authDataToAuthState(user));\n  }\n\n  getAuth(): FirebaseAuthState {\n    return authDataToAuthState(this._fbAuth.currentUser);\n  }\n\n  onAuth(): Observable<FirebaseAuthState> {\n    let stateChange = Observable.create((observer: Observer<FirebaseAuthState>) => {\n      return this._fbAuth.onAuthStateChanged(observer);\n    });\n    let authState = map.call(stateChange, (user: firebase.User) => {\n      if (!user) return null;\n      return authDataToAuthState(user, user.providerData[0]);\n    });\n\n    /**\n     * TODO: since the auth service automatically subscribes to this before\n     * any user, it will run in the Angular zone, instead of the subscription\n     * zone. The auth service should be refactored to capture the subscription\n     * zone and not use a ReplaySubject.\n    **/\n    return observeOn.call(authState, new ZoneScheduler(Zone.current));\n  }\n\n  unauth(): Promise<void> {\n    return <Promise<void>>this._fbAuth.signOut();\n  }\n\n  authWithCustomToken(token: string): Promise<FirebaseAuthState> {\n    return castPromise<firebase.User>((this._fbAuth.signInWithCustomToken(token)))\n      .then((user: firebase.User) => authDataToAuthState(user));\n  }\n\n  authAnonymously(): Promise<FirebaseAuthState> {\n    return castPromise<firebase.User>(this._fbAuth.signInAnonymously())\n      .then((user: firebase.User) => authDataToAuthState(user));\n  }\n\n  authWithPassword(creds: EmailPasswordCredentials): Promise<FirebaseAuthState> {\n    return castPromise<firebase.User>(this._fbAuth.signInWithEmailAndPassword(creds.email, creds.password))\n      .then((user: firebase.User) => authDataToAuthState(user));\n  }\n\n  authWithOAuthPopup(provider: AuthProviders, options?: any): Promise<firebase.auth.UserCredential> {\n    var providerFromFirebase:any = this._enumToAuthProvider(provider);\n    if (options.scope) {\n      options.scope.forEach(scope => providerFromFirebase.addScope(scope));\n    }\n    return castPromise<firebase.auth.UserCredential>(this._fbAuth.signInWithPopup(providerFromFirebase));\n  }\n\n  /**\n   * Authenticates a Firebase client using a redirect-based OAuth flow\n   * NOTE: This promise will not be resolved if authentication is successful since the browser redirected.\n   * You should subscribe to the FirebaseAuth object to listen succesful login\n   */\n  authWithOAuthRedirect(provider: AuthProviders, options?: any): Promise<void> {\n    return castPromise<void>(this._fbAuth.signInWithRedirect(this._enumToAuthProvider(provider)));\n  }\n\n  authWithOAuthToken(credential: firebase.auth.AuthCredential): Promise<FirebaseAuthState> {\n    return castPromise<firebase.User>(this._fbAuth.signInWithCredential(credential))\n      .then((user: firebase.User) => authDataToAuthState(user));\n  }\n\n  getRedirectResult(): Observable<firebase.auth.UserCredential> {\n    return fromPromise(castPromise<firebase.auth.UserCredential>(this._fbAuth.getRedirectResult()));\n  }\n\n  private _enumToAuthProvider(providerId: AuthProviders): any {\n    switch (providerId) {\n      case AuthProviders.Github:\n        return new GithubAuthProvider();\n      case AuthProviders.Twitter:\n        return new TwitterAuthProvider();\n      case AuthProviders.Facebook:\n        return new FacebookAuthProvider();\n      case AuthProviders.Google:\n        return new GoogleAuthProvider();\n      default:\n        throw new Error(`Unsupported firebase auth provider ${providerId}`);\n    }\n  }\n}\n\n// Cast Firebase promises as Zone-patched Promises\nfunction castPromise<T>(promiseLike: PromiseLike<T>): Promise<T> {\n  return Promise.resolve(promiseLike) as Promise<T>;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}