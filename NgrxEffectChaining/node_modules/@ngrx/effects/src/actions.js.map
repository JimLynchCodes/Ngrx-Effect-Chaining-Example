{"version":3,"file":"actions.js","sourceRoot":"","sources":["../../src/actions.ts"],"names":[],"mappings":";;;;;OAEO,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,eAAe;OAC3C,EAAU,UAAU,EAAE,MAAM,aAAa;OACzC,EAAE,UAAU,EAAE,MAAM,iBAAiB;OACrC,EAAE,MAAM,EAAE,MAAM,sBAAsB;AAI7C;IAA6B,2BAAkB;IAC7C,iBAAa,cAAkC;QAC7C,iBAAO,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,cAAc,CAAC;IAC/B,CAAC;IAED,sBAAI,GAAJ,UAAK,QAAQ;QACX,IAAM,UAAU,GAAG,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC;QACrC,UAAU,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC/B,MAAM,CAAC,UAAU,CAAC;IACpB,CAAC;IAED,wBAAM,GAAN;QAAO,cAAiB;aAAjB,WAAiB,CAAjB,sBAAiB,CAAjB,IAAiB;YAAjB,6BAAiB;;QACtB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,UAAC,EAAQ;gBAAN,cAAI;YAC9B,IAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;YACxB,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACd,MAAM,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;YAC1B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;oBAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;wBACrB,MAAM,CAAC,IAAI,CAAC;oBACd,CAAC;gBACH,CAAC;YACH,CAAC;YACD,MAAM,CAAC,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;IACL,CAAC;IACI,kBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,sBAAc,GAA6D;QAClF,EAAC,IAAI,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,UAAU,EAAG,EAAE,EAAG,EAAC;KACzE,CAAC;IACF,cAAC;AAAD,CAAC,AAlCD,CAA6B,UAAU,GAkCtC","sourcesContent":["// TODO: This is a copy of this: https://github.com/redux-observable/redux-observable/blob/master/src/ActionsObservable.js\n// Remove after this is resolved: https://github.com/redux-observable/redux-observable/issues/95\nimport { Injectable, Inject } from '@angular/core';\nimport { Action, Dispatcher } from '@ngrx/store';\nimport { Observable } from 'rxjs/Observable';\nimport { filter } from 'rxjs/operator/filter';\n\n\n\nexport class Actions extends Observable<Action> {\n  constructor( actionsSubject: Observable<Action>) {\n    super();\n    this.source = actionsSubject;\n  }\n\n  lift(operator) {\n    const observable = new Actions(this);\n    observable.operator = operator;\n    return observable;\n  }\n\n  ofType(...keys: string[]): Actions {\n    return filter.call(this, ({ type }) => {\n      const len = keys.length;\n      if (len === 1) {\n        return type === keys[0];\n      } else {\n        for (let i = 0; i < len; i++) {\n          if (keys[i] === type) {\n            return true;\n          }\n        }\n      }\n      return false;\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: Observable, decorators: [{ type: Inject, args: [Dispatcher, ] }, ]},\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}